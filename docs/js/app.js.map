{
  "version": 3,
  "sources": ["../../../src/indexer-web/frontend/state-loader.ts", "../../../src/indexer-web/frontend/ui-helpers.ts", "../../../src/indexer-web/frontend/billboard-canvas.ts", "../../../src/indexer-web/frontend/app.ts"],
  "sourcesContent": ["import { StateData, UBBConfig } from '../backend/types.js';\n\nexport class StateLoader {\n  private apiBase: string;\n  private config: UBBConfig;\n\n  constructor(apiBase: string = '', config?: UBBConfig) {\n    this.apiBase = apiBase;\n    // Use provided config or fall back to window.UBB_CONFIG\n    this.config = config || window.UBB_CONFIG;\n  }\n\n  async loadTipState(): Promise<StateData> {\n    try {\n      // In static mode, fetch the tip state directly using the hardcoded tip hash\n      const stateUrl = `${this.apiBase}${this.config.dataPath}/states/${this.config.tipHash}`;\n      console.log('Loading tip state from:', stateUrl);\n      \n      const response = await fetch(stateUrl);\n      \n      console.log('Response status:', response.status);\n      console.log('Response headers:', response.headers);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const responseText = await response.text();\n      console.log('Response text (first 200 chars):', responseText.substring(0, 200));\n      \n      const state = JSON.parse(responseText) as StateData;\n      console.log('Parsed state:', state);\n      \n      return state;\n    } catch (error) {\n      console.error('Error loading state:', error);\n      throw error;\n    }\n  }\n\n  getConfig(): UBBConfig {\n    return this.config;\n  }\n\n  getImageUrl(txid: string): string {\n    return `${this.apiBase}${this.config.dataPath}/images/${txid}.bmp`;\n  }\n}\n", "import { PlotState, StateData } from '../backend/types.js';\n\nexport class UIHelpers {\n  private static allPlots: PlotState[] = [];\n  private static onPlotSelected: ((plot: PlotState) => void) | null = null;\n  private static imageUrlGetter: ((txid: string) => string) | null = null;\n  private static environment: 'mainnet' | 'testnet' | 'regtest' = 'mainnet';\n\n  /**\n   * Set the network environment for generating explorer URLs\n   */\n  static setEnvironment(environment: 'mainnet' | 'testnet' | 'regtest'): void {\n    this.environment = environment;\n  }\n\n  /**\n   * Show speech bubble tooltip for a plot on the canvas\n   */\n  static showPlotTooltip(plot: PlotState, screenX: number, screenY: number): void {\n    const tooltip = document.getElementById('plot-tooltip');\n    const ownerEl = document.getElementById('tooltip-owner');\n    const txidEl = document.getElementById('tooltip-txid');\n    const uriEl = document.getElementById('tooltip-uri');\n    \n    if (!tooltip || !ownerEl || !txidEl || !uriEl) return;\n\n    // Update tooltip content - handle bricked plots specially\n    if (plot.status === 'BRICKED') {\n      ownerEl.textContent = 'Owner: N/A (Bricked)';\n      ownerEl.style.color = '#ff6b6b';\n    } else {\n      ownerEl.textContent = `Owner: ${plot.owner}`;\n      ownerEl.style.color = '#00ff00';\n    }\n    \n    // Add transaction link\n    const mempoolUrl = this.getMempoolUrl(plot.txid);\n    if (mempoolUrl) {\n      const shortTxid = plot.txid.substring(0, 8) + '...' + plot.txid.substring(plot.txid.length - 8);\n      txidEl.innerHTML = `TX: <a href=\"${mempoolUrl}\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"tooltip-link\">${shortTxid} \u2197</a>`;\n    } else {\n      const shortTxid = plot.txid.substring(0, 8) + '...' + plot.txid.substring(plot.txid.length - 8);\n      txidEl.innerHTML = `<span style=\"color: #888;\">TX: ${shortTxid}</span>`;\n    }\n    \n    if (plot.uri) {\n      uriEl.innerHTML = `<a href=\"${plot.uri}\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"tooltip-link\">${plot.uri} \u2197</a>`;\n    } else {\n      uriEl.innerHTML = '<span style=\"color: #888;\">No URI</span>';\n    }\n    \n    // Position the tooltip above the cursor\n    tooltip.style.left = `${screenX}px`;\n    tooltip.style.top = `${screenY - 140}px`;\n    \n    // Show tooltip\n    tooltip.classList.remove('hidden');\n  }\n  \n  /**\n   * Hide the plot tooltip\n   */\n  static hidePlotTooltip(): void {\n    const tooltip = document.getElementById('plot-tooltip');\n    if (tooltip) {\n      tooltip.classList.add('hidden');\n    }\n  }\n\n  /**\n   * Show the plot list modal with search functionality\n   */\n  static showPlotListModal(state: StateData, onPlotSelect: (plot: PlotState) => void, imageUrlGetter: (txid: string) => string, environment: 'mainnet' | 'testnet' | 'regtest' = 'mainnet'): void {\n    this.allPlots = state.plots;\n    this.onPlotSelected = onPlotSelect;\n    this.imageUrlGetter = imageUrlGetter;\n    this.environment = environment;\n    \n    const modal = document.getElementById('plot-list-modal');\n    if (!modal) return;\n\n    // Initialize search inputs\n    const searchOwner = document.getElementById('search-owner') as HTMLInputElement;\n    const searchTxid = document.getElementById('search-txid') as HTMLInputElement;\n    \n    if (searchOwner) searchOwner.value = '';\n    if (searchTxid) searchTxid.value = '';\n    \n    // Render all plots initially\n    this.renderPlotList(state.plots);\n    \n    // Setup search event listeners\n    this.setupPlotListSearch();\n    \n    // Show modal\n    modal.classList.add('active');\n  }\n  \n  /**\n   * Close the plot list modal\n   */\n  static closePlotListModal(): void {\n    const modal = document.getElementById('plot-list-modal');\n    if (modal) {\n      modal.classList.remove('active');\n    }\n  }\n\n  /**\n   * Setup search functionality for plot list\n   */\n  private static setupPlotListSearch(): void {\n    const searchOwner = document.getElementById('search-owner') as HTMLInputElement;\n    const searchTxid = document.getElementById('search-txid') as HTMLInputElement;\n    \n    const performSearch = () => {\n      const ownerQuery = searchOwner?.value.toLowerCase().trim() || '';\n      const txidQuery = searchTxid?.value.toLowerCase().trim() || '';\n      \n      const filtered = this.allPlots.filter(plot => {\n        const matchesOwner = !ownerQuery || plot.owner.toLowerCase().includes(ownerQuery);\n        const matchesTxid = !txidQuery || plot.txid.toLowerCase().includes(txidQuery);\n        return matchesOwner && matchesTxid;\n      });\n      \n      this.renderPlotList(filtered);\n    };\n    \n    if (searchOwner) {\n      searchOwner.removeEventListener('input', performSearch);\n      searchOwner.addEventListener('input', performSearch);\n    }\n    \n    if (searchTxid) {\n      searchTxid.removeEventListener('input', performSearch);\n      searchTxid.addEventListener('input', performSearch);\n    }\n  }\n\n  /**\n   * Render the plot list\n   */\n  private static renderPlotList(plots: PlotState[]): void {\n    const listBody = document.getElementById('plot-list-body');\n    const filterCount = document.getElementById('filter-count');\n    \n    if (!listBody) return;\n    \n    // Update count\n    if (filterCount) {\n      filterCount.textContent = `${plots.length} plot${plots.length !== 1 ? 's' : ''}`;\n    }\n    \n    if (plots.length === 0) {\n      listBody.innerHTML = '<div style=\"text-align: center; color: #888; padding: 40px;\">No plots found</div>';\n      return;\n    }\n    \n    // Sort plots by status (PLACED first, then UNPLACED, then BRICKED)\n    const sorted = [...plots].sort((a, b) => {\n      const statusOrder = { 'PLACED': 0, 'UNPLACED': 1, 'BRICKED': 2 };\n      const aOrder = statusOrder[a.status as keyof typeof statusOrder] ?? 3;\n      const bOrder = statusOrder[b.status as keyof typeof statusOrder] ?? 3;\n      return aOrder - bOrder;\n    });\n    \n    listBody.innerHTML = sorted.map(plot => this.createPlotListItem(plot)).join('');\n    \n    // Add click handlers\n    listBody.querySelectorAll('.plot-list-item').forEach((item, index) => {\n      item.addEventListener('click', () => {\n        if (this.onPlotSelected) {\n          this.onPlotSelected(sorted[index]);\n          this.closePlotListModal();\n        }\n      });\n    });\n  }\n\n  /**\n   * Get mempool.space URL for a transaction\n   */\n  private static getMempoolUrl(txid: string): string | null {\n    if (this.environment === 'mainnet') {\n      return `https://mempool.space/tx/${txid}`;\n    } else if (this.environment === 'testnet') {\n      return `https://mempool.space/testnet/tx/${txid}`;\n    }\n    // No public explorer for regtest\n    return null;\n  }\n\n  /**\n   * Create HTML for a single plot list item\n   */\n  private static createPlotListItem(plot: PlotState): string {\n    const uriSection = plot.uri ? `\n      <div><strong>URI:</strong> <code>${plot.uri}</code></div>\n    ` : '';\n    \n    const imageUrl = this.imageUrlGetter ? this.imageUrlGetter(plot.txid) : '';\n    \n    // Create transaction link for mempool.space\n    const mempoolUrl = this.getMempoolUrl(plot.txid);\n    const txidDisplay = mempoolUrl \n      ? `<a href=\"${mempoolUrl}\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"txid-link\">${plot.txid}</a>`\n      : `<code>${plot.txid}</code>`;\n    \n    return `\n      <div class=\"plot-list-item\">\n        <div class=\"plot-item-header\">\n          <span class=\"plot-status ${plot.status.toLowerCase()}\">${plot.status}</span>\n        </div>\n        <div class=\"plot-item-content\">\n          <img class=\"plot-item-image\" src=\"${imageUrl}\" alt=\"Plot ${plot.txid}\" />\n          <div class=\"plot-item-details\">\n            <div><strong>Position:</strong> <code>(${plot.x0}, ${plot.y0})</code></div>\n            <div><strong>Size:</strong> <code>${plot.width}\u00D7${plot.height}</code></div>\n            <div><strong>Owner:</strong> <code>${plot.owner}</code></div>\n            <div><strong>TX ID:</strong> ${txidDisplay}</div>\n            ${uriSection}\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Initialize modal event listeners\n   */\n  static initializeModalEventListeners(): void {\n    // Close plot list modal\n    const closePlotListBtn = document.getElementById('close-plot-list');\n    if (closePlotListBtn) {\n      closePlotListBtn.addEventListener('click', () => {\n        this.closePlotListModal();\n      });\n    }\n    \n    // Close modal when clicking outside\n    const plotListModal = document.getElementById('plot-list-modal');\n    if (plotListModal) {\n      plotListModal.addEventListener('click', (e: MouseEvent) => {\n        if ((e.target as HTMLElement).id === 'plot-list-modal') {\n          this.closePlotListModal();\n        }\n      });\n    }\n    \n    // Close modal on Escape key\n    document.addEventListener('keydown', (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        this.closePlotListModal();\n        this.hidePlotTooltip();\n      }\n    });\n  }\n\n  /**\n   * Show technical details panel\n   */\n  static showTechnicalDetails(state: StateData): void {\n    const panel = document.getElementById('technical-details');\n    const content = document.getElementById('details-content');\n    \n    if (!panel || !content) return;\n    \n    const placedCount = state.plots.filter(p => p.status === 'PLACED').length;\n    const unplacedCount = state.plots.filter(p => p.status === 'UNPLACED').length;\n    const brickedPlacedCount = state.plots.filter(p => p.status === 'BRICKED' && p.wasPlacedBeforeBricking).length;\n    const brickedUnplacedCount = state.plots.filter(p => p.status === 'BRICKED' && !p.wasPlacedBeforeBricking).length;\n    \n    content.innerHTML = `\n      <div class=\"detail-item\">\n        <div class=\"detail-label\">Latest Block Hash</div>\n        <div class=\"detail-value\">${state.blockHash}</div>\n      </div>\n      <div class=\"detail-item\">\n        <div class=\"detail-label\">Parent Block Hash</div>\n        <div class=\"detail-value\">${state.parentHash}</div>\n      </div>\n      <div class=\"detail-item\">\n        <div class=\"detail-label\">Block Height</div>\n        <div class=\"detail-value\">${state.blockHeight === -1 ? 'N/A (regtest)' : state.blockHeight.toLocaleString()}</div>\n      </div>\n      <div class=\"detail-item\">\n        <div class=\"detail-label\">Total Plots</div>\n        <div class=\"detail-value\">${state.plots.length}</div>\n      </div>\n      <div class=\"detail-item\">\n        <div class=\"detail-label\">Placed Plots</div>\n        <div class=\"detail-value\">${placedCount}</div>\n      </div>\n      <div class=\"detail-item\">\n        <div class=\"detail-label\">Unplaced Plots</div>\n        <div class=\"detail-value\">${unplacedCount}</div>\n      </div>\n      <div class=\"detail-item\">\n        <div class=\"detail-label\">Bricked (Placed)</div>\n        <div class=\"detail-value\">${brickedPlacedCount}</div>\n      </div>\n      <div class=\"detail-item\">\n        <div class=\"detail-label\">Bricked (Unplaced)</div>\n        <div class=\"detail-value\">${brickedUnplacedCount}</div>\n      </div>\n      <div class=\"detail-item\">\n        <div class=\"detail-label\">Deed UTXOs</div>\n        <div class=\"detail-value\">${state.deedUTXOs.length}</div>\n      </div>\n      <div class=\"detail-item\">\n        <div class=\"detail-label\">Transactions in Latest Block</div>\n        <div class=\"detail-value\">${state.transactionCount}</div>\n      </div>\n    `;\n    \n    panel.classList.remove('hidden');\n  }\n  \n  /**\n   * Hide technical details panel\n   */\n  static hideTechnicalDetails(): void {\n    const panel = document.getElementById('technical-details');\n    if (panel) {\n      panel.classList.add('hidden');\n    }\n  }\n  \n  /**\n   * Toggle technical details panel\n   */\n  static toggleTechnicalDetails(state: StateData): void {\n    const panel = document.getElementById('technical-details');\n    if (!panel) return;\n    \n    if (panel.classList.contains('hidden')) {\n      this.showTechnicalDetails(state);\n    } else {\n      this.hideTechnicalDetails();\n    }\n  }\n}", "import { StateData, PlotState } from '../backend/types.js';\nimport { UIHelpers } from './ui-helpers.js';\n\nexport class BillboardCanvas {\n  private canvas: HTMLCanvasElement;\n  private ctx: CanvasRenderingContext2D;\n  private state: StateData;\n  \n  // World configuration\n  private readonly WORLD_SIZE = 65536;\n  private readonly CENTER_PIXEL = 32767;\n  \n  // Camera state\n  private camera = {\n    x: 0,\n    y: 0,\n    zoom: 1.0\n  };\n  \n  // Image cache\n  private imageCache: Record<string, HTMLImageElement> = {};\n  \n  // Interaction state\n  private isMouseDown = false;\n  private isDragging = false;\n  private lastMouseX = 0;\n  private lastMouseY = 0;\n  private dragStartX = 0;\n  private dragStartY = 0;\n  private readonly DRAG_THRESHOLD = 5;\n  \n  // Touch interaction\n  private touches: Touch[] = [];\n  private lastTouchDistance = 0;\n  \n  // Placed plots (includes BRICKED plots that were placed)\n  private placedPlots: PlotState[] = [];\n  \n  // UI elements\n  private zoomDisplay!: HTMLElement;\n  private positionDisplay!: HTMLElement;\n  private visiblePlotsDisplay!: HTMLElement;\n  \n  // Stats tracking\n  private visiblePlotCount = 0;\n  private lastFrameTime = 0;\n  private fps = 0;\n  \n  // Active tooltip\n  private activeTooltipPlot: PlotState | null = null;\n\n  constructor(canvasId: string, state: StateData, imageUrlGetter: (txid: string) => string) {\n    const canvas = document.getElementById(canvasId) as HTMLCanvasElement;\n    \n    if (!canvas) {\n      throw new Error('Canvas element not found');\n    }\n    \n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      throw new Error('Failed to get canvas 2D context');\n    }\n    \n    this.canvas = canvas;\n    this.ctx = ctx;\n    this.state = state;\n    \n    // Filter placed plots (PLACED or BRICKED that were placed)\n    this.placedPlots = state.plots.filter(p => \n      p.status === 'PLACED' || \n      (p.status === 'BRICKED' && p.wasPlacedBeforeBricking)\n    );\n    \n    this.initializeUI();\n    this.preloadImages(imageUrlGetter).then(() => {\n      this.resizeCanvas();\n      this.setupEventListeners();\n      this.startRenderLoop();\n    });\n  }\n\n  private initializeUI(): void {\n    this.zoomDisplay = document.getElementById('zoom-display')!;\n    this.positionDisplay = document.getElementById('position-display')!;\n    this.visiblePlotsDisplay = document.getElementById('visible-plots')!;\n  }\n\n  private async preloadImages(imageUrlGetter: (txid: string) => string): Promise<void> {\n    const imagePromises = this.placedPlots.map(plot => {\n      return new Promise<void>((resolve) => {\n        const img = new Image();\n        img.crossOrigin = 'anonymous';\n        img.onload = () => {\n          this.imageCache[plot.txid] = img;\n          resolve();\n        };\n        img.onerror = () => {\n          console.error('Failed to load image:', plot.txid);\n          resolve();\n        };\n        img.src = imageUrlGetter(plot.txid);\n      });\n    });\n\n    await Promise.all(imagePromises);\n  }\n\n  private resizeCanvas(): void {\n    // Make canvas fill available space (accounting for header)\n    const headerHeight = 140;\n    const displayWidth = window.innerWidth;\n    const displayHeight = window.innerHeight - headerHeight;\n    \n    // Get device pixel ratio for high-DPI displays\n    const dpr = window.devicePixelRatio || 1;\n    \n    // Set CSS display size (what user sees)\n    this.canvas.style.width = `${displayWidth}px`;\n    this.canvas.style.height = `${displayHeight}px`;\n    \n    // Set actual canvas resolution (scaled by device pixel ratio for crisp rendering)\n    this.canvas.width = displayWidth * dpr;\n    this.canvas.height = displayHeight * dpr;\n    \n    // Scale the context to account for device pixel ratio\n    this.ctx.setTransform(dpr, 0, 0, dpr, 0, 0);\n    \n    // Recenter camera on billboard center (use display size, not canvas size)\n    this.camera.x = this.CENTER_PIXEL - displayWidth / (2 * this.camera.zoom);\n    this.camera.y = this.CENTER_PIXEL - displayHeight / (2 * this.camera.zoom);\n    \n    this.render();\n  }\n\n  private getZoomConstraints(): { minZoom: number; maxZoom: number } {\n    // Use display dimensions, not canvas dimensions (which are scaled by DPR)\n    const displayWidth = this.canvas.clientWidth;\n    const displayHeight = this.canvas.clientHeight;\n    const minZoomX = displayWidth / this.WORLD_SIZE;\n    const minZoomY = displayHeight / this.WORLD_SIZE;\n    // Use minimum so we can zoom out to fit the most constrained dimension\n    const minZoom = Math.min(minZoomX, minZoomY, 0.01);\n    const maxZoom = 20.0;\n    return { minZoom, maxZoom };\n  }\n\n  private clampCamera(): void {\n    const { minZoom, maxZoom } = this.getZoomConstraints();\n    this.camera.zoom = Math.max(minZoom, Math.min(maxZoom, this.camera.zoom));\n    \n    // Use display dimensions, not canvas dimensions\n    const displayWidth = this.canvas.clientWidth;\n    const displayHeight = this.canvas.clientHeight;\n    \n    // Allow camera to go beyond world boundaries when zoomed out\n    const viewWidth = displayWidth / this.camera.zoom;\n    const viewHeight = displayHeight / this.camera.zoom;\n    \n    // Calculate how much we can pan beyond the world\n    const maxX = viewWidth > this.WORLD_SIZE ? (viewWidth - this.WORLD_SIZE) / 2 : this.WORLD_SIZE - viewWidth;\n    const maxY = viewHeight > this.WORLD_SIZE ? (viewHeight - this.WORLD_SIZE) / 2 : this.WORLD_SIZE - viewHeight;\n    const minX = viewWidth > this.WORLD_SIZE ? -(viewWidth - this.WORLD_SIZE) / 2 : 0;\n    const minY = viewHeight > this.WORLD_SIZE ? -(viewHeight - this.WORLD_SIZE) / 2 : 0;\n    \n    this.camera.x = Math.max(minX, Math.min(this.camera.x, maxX));\n    this.camera.y = Math.max(minY, Math.min(this.camera.y, maxY));\n  }\n\n  private startRenderLoop(): void {\n    const loop = (timestamp: number) => {\n      // Calculate FPS\n      if (this.lastFrameTime > 0) {\n        const delta = timestamp - this.lastFrameTime;\n        this.fps = Math.round(1000 / delta);\n      }\n      this.lastFrameTime = timestamp;\n      \n      requestAnimationFrame(loop);\n    };\n    \n    requestAnimationFrame(loop);\n  }\n\n  private render(): void {\n    // Clear canvas with dark background\n    this.ctx.fillStyle = '#0a0a0a';\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n    // Calculate visible world bounds\n    const worldLeft = this.camera.x;\n    const worldTop = this.camera.y;\n    const worldRight = this.camera.x + this.canvas.width / this.camera.zoom;\n    const worldBottom = this.camera.y + this.canvas.height / this.camera.zoom;\n\n    // Save context state\n    this.ctx.save();\n    \n    // Disable image smoothing for crisp pixel rendering\n    this.ctx.imageSmoothingEnabled = false;\n    \n    // Apply camera transform\n    this.ctx.scale(this.camera.zoom, this.camera.zoom);\n    this.ctx.translate(-this.camera.x, -this.camera.y);\n\n    // Draw zoom-dependent grid\n    this.drawZoomDependentGrid(worldLeft, worldTop, worldRight, worldBottom);\n\n    // Draw world boundary\n    this.drawWorldBoundary();\n\n    // Viewport culling: only draw visible plots\n    this.visiblePlotCount = 0;\n    this.placedPlots.forEach(plot => {\n      const plotRight = plot.x0 + plot.width;\n      const plotBottom = plot.y0 + plot.height;\n      \n      // Check if plot is in viewport\n      if (plotRight < worldLeft || plot.x0 > worldRight ||\n          plotBottom < worldTop || plot.y0 > worldBottom) {\n        return;\n      }\n      \n      this.visiblePlotCount++;\n      \n      const img = this.imageCache[plot.txid];\n      if (img) {\n        this.ctx.drawImage(img, plot.x0, plot.y0, plot.width, plot.height);\n        \n        // Draw border around plot if it's the active tooltip\n        if (this.activeTooltipPlot && this.activeTooltipPlot.txid === plot.txid) {\n          this.ctx.strokeStyle = '#667eea';\n          this.ctx.lineWidth = 3 / this.camera.zoom;\n          this.ctx.strokeRect(plot.x0, plot.y0, plot.width, plot.height);\n        }\n      }\n    });\n\n    this.ctx.restore();\n\n    // Update UI displays\n    this.updateUIDisplays();\n  }\n\n  private drawZoomDependentGrid(worldLeft: number, worldTop: number, worldRight: number, worldBottom: number): void {\n    // Determine grid size based on zoom level\n    let gridSize: number;\n    if (this.camera.zoom < 0.1) {\n      gridSize = 10000;\n    } else if (this.camera.zoom < 1.0) {\n      gridSize = 1000;\n    } else {\n      gridSize = 100;\n    }\n    \n    this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';\n    this.ctx.lineWidth = 1 / this.camera.zoom;\n    \n    // Clamp grid to world boundaries\n    const gridLeft = Math.max(0, worldLeft);\n    const gridTop = Math.max(0, worldTop);\n    const gridRight = Math.min(this.WORLD_SIZE, worldRight);\n    const gridBottom = Math.min(this.WORLD_SIZE, worldBottom);\n    \n    const startX = Math.floor(gridLeft / gridSize) * gridSize;\n    const endX = Math.ceil(gridRight / gridSize) * gridSize;\n    const startY = Math.floor(gridTop / gridSize) * gridSize;\n    const endY = Math.ceil(gridBottom / gridSize) * gridSize;\n    \n    // Vertical lines\n    for (let x = startX; x <= endX; x += gridSize) {\n      if (x >= 0 && x <= this.WORLD_SIZE) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(x, gridTop);\n        this.ctx.lineTo(x, gridBottom);\n        this.ctx.stroke();\n      }\n    }\n    \n    // Horizontal lines\n    for (let y = startY; y <= endY; y += gridSize) {\n      if (y >= 0 && y <= this.WORLD_SIZE) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(gridLeft, y);\n        this.ctx.lineTo(gridRight, y);\n        this.ctx.stroke();\n      }\n    }\n    \n    // Draw origin marker (center of billboard)\n    // Crosshair removed - no longer drawn\n  }\n\n  private drawWorldBoundary(): void {\n    // Draw a prominent border around the world boundaries\n    this.ctx.strokeStyle = '#F7931A'; // Bitcoin orange\n    this.ctx.lineWidth = 4 / this.camera.zoom;\n    this.ctx.strokeRect(0, 0, this.WORLD_SIZE, this.WORLD_SIZE);\n    \n    // Draw corner markers for better visibility\n    const markerSize = 200 / this.camera.zoom;\n    this.ctx.strokeStyle = '#F7931A';\n    this.ctx.lineWidth = 3 / this.camera.zoom;\n    \n    // Top-left corner\n    this.ctx.beginPath();\n    this.ctx.moveTo(0, markerSize);\n    this.ctx.lineTo(0, 0);\n    this.ctx.lineTo(markerSize, 0);\n    this.ctx.stroke();\n    \n    // Top-right corner\n    this.ctx.beginPath();\n    this.ctx.moveTo(this.WORLD_SIZE - markerSize, 0);\n    this.ctx.lineTo(this.WORLD_SIZE, 0);\n    this.ctx.lineTo(this.WORLD_SIZE, markerSize);\n    this.ctx.stroke();\n    \n    // Bottom-left corner\n    this.ctx.beginPath();\n    this.ctx.moveTo(0, this.WORLD_SIZE - markerSize);\n    this.ctx.lineTo(0, this.WORLD_SIZE);\n    this.ctx.lineTo(markerSize, this.WORLD_SIZE);\n    this.ctx.stroke();\n    \n    // Bottom-right corner\n    this.ctx.beginPath();\n    this.ctx.moveTo(this.WORLD_SIZE - markerSize, this.WORLD_SIZE);\n    this.ctx.lineTo(this.WORLD_SIZE, this.WORLD_SIZE);\n    this.ctx.lineTo(this.WORLD_SIZE, this.WORLD_SIZE - markerSize);\n    this.ctx.stroke();\n  }\n\n  private updateUIDisplays(): void {\n    this.zoomDisplay.textContent = `Zoom: ${Math.round(this.camera.zoom * 100)}%`;\n    this.visiblePlotsDisplay.textContent = `Visible: ${this.visiblePlotCount}`;\n  }\n\n  private updateCursorPosition(e: MouseEvent): void {\n    const rect = this.canvas.getBoundingClientRect();\n    const canvasX = e.clientX - rect.left;\n    const canvasY = e.clientY - rect.top;\n    \n    const worldX = this.camera.x + canvasX / this.camera.zoom;\n    const worldY = this.camera.y + canvasY / this.camera.zoom;\n    \n    this.positionDisplay.textContent = `Position: (${Math.round(worldX)}, ${Math.round(worldY)})`;\n  }\n\n  private handleCanvasClick(e: MouseEvent): void {\n    const rect = this.canvas.getBoundingClientRect();\n    const canvasX = e.clientX - rect.left;\n    const canvasY = e.clientY - rect.top;\n    \n    const worldX = this.camera.x + canvasX / this.camera.zoom;\n    const worldY = this.camera.y + canvasY / this.camera.zoom;\n    \n    const clickedPlot = this.placedPlots.find(plot => {\n      return worldX >= plot.x0 && worldX <= plot.x0 + plot.width &&\n             worldY >= plot.y0 && worldY <= plot.y0 + plot.height;\n    });\n    \n    if (clickedPlot) {\n      // Show speech bubble tooltip\n      this.activeTooltipPlot = clickedPlot;\n      UIHelpers.showPlotTooltip(clickedPlot, e.clientX, e.clientY);\n      this.render();\n    } else {\n      // Hide tooltip when clicking empty space\n      this.activeTooltipPlot = null;\n      UIHelpers.hidePlotTooltip();\n      this.render();\n    }\n  }\n\n  private setupEventListeners(): void {\n    // Mouse handlers\n    this.canvas.addEventListener('mousedown', (e) => {\n      this.isMouseDown = true;\n      this.isDragging = false;\n      this.dragStartX = e.clientX;\n      this.dragStartY = e.clientY;\n      this.lastMouseX = e.clientX;\n      this.lastMouseY = e.clientY;\n    });\n\n    this.canvas.addEventListener('mousemove', (e) => {\n      this.updateCursorPosition(e);\n      \n      if (this.isMouseDown) {\n        const dx = e.clientX - this.dragStartX;\n        const dy = e.clientY - this.dragStartY;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        \n        if (distance > this.DRAG_THRESHOLD) {\n          this.isDragging = true;\n        }\n        \n        if (this.isDragging) {\n          const dx = (e.clientX - this.lastMouseX) / this.camera.zoom;\n          const dy = (e.clientY - this.lastMouseY) / this.camera.zoom;\n          \n          this.camera.x -= dx;\n          this.camera.y -= dy;\n          this.clampCamera();\n          \n          this.lastMouseX = e.clientX;\n          this.lastMouseY = e.clientY;\n          this.render();\n        }\n      }\n    });\n\n    this.canvas.addEventListener('mouseup', (e) => {\n      const wasDragging = this.isDragging;\n      this.isMouseDown = false;\n      this.isDragging = false;\n      \n      if (!wasDragging) {\n        this.handleCanvasClick(e);\n      }\n    });\n    \n    this.canvas.addEventListener('mouseleave', () => {\n      this.isMouseDown = false;\n      this.isDragging = false;\n    });\n\n    // Mouse wheel zoom\n    this.canvas.addEventListener('wheel', (e) => {\n      e.preventDefault();\n      \n      const zoomFactor = e.deltaY > 0 ? 0.9 : 1.1;\n      const rect = this.canvas.getBoundingClientRect();\n      const mouseX = e.clientX - rect.left;\n      const mouseY = e.clientY - rect.top;\n      \n      const worldX = this.camera.x + mouseX / this.camera.zoom;\n      const worldY = this.camera.y + mouseY / this.camera.zoom;\n      \n      this.camera.zoom *= zoomFactor;\n      this.camera.x = worldX - mouseX / this.camera.zoom;\n      this.camera.y = worldY - mouseY / this.camera.zoom;\n      \n      this.clampCamera();\n      this.render();\n    });\n\n    // Touch handlers\n    this.canvas.addEventListener('touchstart', (e) => {\n      this.touches = Array.from(e.touches);\n      if (this.touches.length === 2) {\n        const dx = this.touches[0].clientX - this.touches[1].clientX;\n        const dy = this.touches[0].clientY - this.touches[1].clientY;\n        this.lastTouchDistance = Math.sqrt(dx * dx + dy * dy);\n      }\n    });\n\n    this.canvas.addEventListener('touchmove', (e) => {\n      e.preventDefault();\n      this.touches = Array.from(e.touches);\n      \n      if (this.touches.length === 2) {\n        const dx = this.touches[0].clientX - this.touches[1].clientX;\n        const dy = this.touches[0].clientY - this.touches[1].clientY;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        \n        if (this.lastTouchDistance > 0) {\n          const zoomFactor = distance / this.lastTouchDistance;\n          \n          const centerX = (this.touches[0].clientX + this.touches[1].clientX) / 2;\n          const centerY = (this.touches[0].clientY + this.touches[1].clientY) / 2;\n          const rect = this.canvas.getBoundingClientRect();\n          const canvasX = centerX - rect.left;\n          const canvasY = centerY - rect.top;\n          \n          const worldX = this.camera.x + canvasX / this.camera.zoom;\n          const worldY = this.camera.y + canvasY / this.camera.zoom;\n          \n          this.camera.zoom *= zoomFactor;\n          this.camera.x = worldX - canvasX / this.camera.zoom;\n          this.camera.y = worldY - canvasY / this.camera.zoom;\n          \n          this.clampCamera();\n        }\n        \n        this.lastTouchDistance = distance;\n        this.render();\n      } else if (this.touches.length === 1 && this.isDragging) {\n        const dx = (this.touches[0].clientX - this.lastMouseX) / this.camera.zoom;\n        const dy = (this.touches[0].clientY - this.lastMouseY) / this.camera.zoom;\n        \n        this.camera.x -= dx;\n        this.camera.y -= dy;\n        this.clampCamera();\n        \n        this.lastMouseX = this.touches[0].clientX;\n        this.lastMouseY = this.touches[0].clientY;\n        this.render();\n      }\n    });\n\n    this.canvas.addEventListener('touchend', (e) => {\n      if (e.touches.length < 2) {\n        this.lastTouchDistance = 0;\n      }\n      if (e.touches.length === 0) {\n        this.isDragging = false;\n      }\n    });\n\n    // Window resize\n    window.addEventListener('resize', () => {\n      this.resizeCanvas();\n    });\n  }\n\n  public zoomIn(): void {\n    this.camera.zoom *= 1.3;\n    this.clampCamera();\n    this.render();\n  }\n\n  public zoomOut(): void {\n    this.camera.zoom *= 0.7;\n    this.clampCamera();\n    this.render();\n  }\n\n  public resetView(): void {\n    const displayWidth = this.canvas.clientWidth;\n    const displayHeight = this.canvas.clientHeight;\n    this.camera.x = this.CENTER_PIXEL - displayWidth / 2;\n    this.camera.y = this.CENTER_PIXEL - displayHeight / 2;\n    this.camera.zoom = 1.0;\n    this.clampCamera();\n    this.render();\n  }\n\n  public goToCoordinates(x: number, y: number): void {\n    // Center the camera on the specified coordinates (use display dimensions)\n    const displayWidth = this.canvas.clientWidth;\n    const displayHeight = this.canvas.clientHeight;\n    this.camera.x = x - displayWidth / (2 * this.camera.zoom);\n    this.camera.y = y - displayHeight / (2 * this.camera.zoom);\n    this.clampCamera();\n    this.render();\n  }\n\n  public centerOnPlot(plot: PlotState): void {\n    const displayWidth = this.canvas.clientWidth;\n    const displayHeight = this.canvas.clientHeight;\n    const centerX = plot.x0 + plot.width / 2;\n    const centerY = plot.y0 + plot.height / 2;\n    \n    // Zoom to fit the plot nicely\n    const zoomX = displayWidth / (plot.width * 3);\n    const zoomY = displayHeight / (plot.height * 3);\n    this.camera.zoom = Math.min(zoomX, zoomY, 10.0);\n    \n    this.camera.x = centerX - displayWidth / (2 * this.camera.zoom);\n    this.camera.y = centerY - displayHeight / (2 * this.camera.zoom);\n    this.clampCamera();\n    this.render();\n  }\n}", "import { StateLoader } from './state-loader.js';\nimport { BillboardCanvas } from './billboard-canvas.js';\nimport { UIHelpers } from './ui-helpers.js';\nimport { StateData } from '../backend/types.js';\n\nclass App {\n  private stateLoader: StateLoader;\n  private canvas: BillboardCanvas | null = null;\n  private state: StateData | null = null;\n\n  constructor() {\n    this.stateLoader = new StateLoader('');\n    this.initialize();\n  }\n\n  private async initialize(): Promise<void> {\n    // Initialize modal event listeners\n    UIHelpers.initializeModalEventListeners();\n    \n    // Load and render state\n    await this.loadAndRenderState();\n  }\n\n  private async loadAndRenderState(): Promise<void> {\n    try {\n      // Show loading state\n      this.showLoading();\n      \n      // Get config from window.UBB_CONFIG\n      const config = this.stateLoader.getConfig();\n      \n      // Set environment for UI helpers (used for mempool.space links)\n      UIHelpers.setEnvironment(config.environment);\n      \n      // Update header with environment\n      this.updateHeader(config.environment);\n      \n      // Load state\n      this.state = await this.stateLoader.loadTipState();\n      \n      // Hide loading\n      this.hideLoading();\n      \n      // Render the canvas\n      this.canvas = new BillboardCanvas(\n        'billboard-canvas',\n        this.state,\n        (txid) => this.stateLoader.getImageUrl(txid)\n      );\n      \n      // Setup UI controls\n      this.setupControls();\n      \n    } catch (error) {\n      console.error('Error loading state:', error);\n      this.showError(`Failed to load state: ${(error as Error).message}`);\n    }\n  }\n\n  private showLoading(): void {\n    const existingLoading = document.querySelector('.loading');\n    if (!existingLoading) {\n      const loading = document.createElement('div');\n      loading.className = 'loading';\n      loading.textContent = 'Loading state...';\n      document.body.appendChild(loading);\n    }\n  }\n\n  private hideLoading(): void {\n    const loading = document.querySelector('.loading');\n    if (loading) {\n      loading.remove();\n    }\n  }\n\n  private showError(message: string): void {\n    this.hideLoading();\n    const error = document.createElement('div');\n    error.className = 'error';\n    error.innerHTML = `${message}<br><small>Check browser console for details</small>`;\n    document.body.appendChild(error);\n  }\n\n  private updateHeader(environment: string): void {\n    const envBadge = document.getElementById('environment-badge');\n    if (envBadge) {\n      envBadge.textContent = environment;\n      envBadge.className = `environment ${environment}`;\n    }\n  }\n\n  private setupControls(): void {\n    if (!this.state || !this.canvas) return;\n    \n    // Technical details toggle\n    const toggleDetailsBtn = document.getElementById('toggle-details');\n    if (toggleDetailsBtn) {\n      toggleDetailsBtn.addEventListener('click', () => {\n        if (this.state) {\n          UIHelpers.toggleTechnicalDetails(this.state);\n        }\n      });\n    }\n    \n    // Close technical details\n    const closeDetailsBtn = document.getElementById('close-details');\n    if (closeDetailsBtn) {\n      closeDetailsBtn.addEventListener('click', () => {\n        UIHelpers.hideTechnicalDetails();\n      });\n    }\n    \n    // Show plots button\n    const showPlotsBtn = document.getElementById('show-plots');\n    if (showPlotsBtn) {\n      showPlotsBtn.addEventListener('click', () => {\n        if (this.state && this.canvas) {\n          const config = this.stateLoader.getConfig();\n          UIHelpers.showPlotListModal(this.state, (plot) => {\n            if (this.canvas) {\n              this.canvas.centerOnPlot(plot);\n            }\n          }, (txid) => this.stateLoader.getImageUrl(txid), config.environment);\n        }\n      });\n    }\n    \n    // Reset view button\n    const resetViewBtn = document.getElementById('reset-view');\n    if (resetViewBtn) {\n      resetViewBtn.addEventListener('click', () => {\n        if (this.canvas) {\n          this.canvas.resetView();\n        }\n      });\n    }\n    \n    // Coordinate navigation\n    const navGoBtn = document.getElementById('nav-go');\n    const navXInput = document.getElementById('nav-x') as HTMLInputElement;\n    const navYInput = document.getElementById('nav-y') as HTMLInputElement;\n    \n    const goToCoordinates = () => {\n      if (!this.canvas) return;\n      \n      const x = parseInt(navXInput.value);\n      const y = parseInt(navYInput.value);\n      \n      if (isNaN(x) || isNaN(y)) {\n        alert('Please enter valid coordinates');\n        return;\n      }\n      \n      if (x < 0 || x > 65535 || y < 0 || y > 65535) {\n        alert('Coordinates must be between 0 and 65535');\n        return;\n      }\n      \n      this.canvas.goToCoordinates(x, y);\n    };\n    \n    if (navGoBtn) {\n      navGoBtn.addEventListener('click', goToCoordinates);\n    }\n    \n    // Allow Enter key in coordinate inputs\n    if (navXInput) {\n      navXInput.addEventListener('keypress', (e) => {\n        if (e.key === 'Enter') {\n          goToCoordinates();\n        }\n      });\n    }\n    \n    if (navYInput) {\n      navYInput.addEventListener('keypress', (e) => {\n        if (e.key === 'Enter') {\n          goToCoordinates();\n        }\n      });\n    }\n    \n    // Keyboard shortcuts\n    this.setupKeyboardShortcuts();\n  }\n\n  private setupKeyboardShortcuts(): void {\n    document.addEventListener('keydown', (e) => {\n      // Ignore if typing in an input\n      if (e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement) {\n        return;\n      }\n      \n      if (!this.canvas) return;\n      \n      switch(e.key) {\n        case '0':\n          this.canvas.resetView();\n          break;\n        case '+':\n        case '=':\n          this.canvas.zoomIn();\n          break;\n        case '-':\n          this.canvas.zoomOut();\n          break;\n        case 't':\n        case 'T':\n          if (this.state) {\n            UIHelpers.toggleTechnicalDetails(this.state);\n          }\n          break;\n        case 'p':\n        case 'P':\n          if (this.state) {\n            const config = this.stateLoader.getConfig();\n            UIHelpers.showPlotListModal(this.state, (plot) => {\n              if (this.canvas) {\n                this.canvas.centerOnPlot(plot);\n              }\n            }, (txid) => this.stateLoader.getImageUrl(txid), config.environment);\n          }\n          break;\n      }\n    });\n  }\n}\n\n// Initialize app when DOM is ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', () => new App());\n} else {\n  new App();\n}"],
  "mappings": "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",
  "names": ["dx", "dy"]
}
