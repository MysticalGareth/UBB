{
  "version": 3,
  "sources": ["../../node_modules/base64-js/index.js", "../../node_modules/ieee754/index.js", "../../node_modules/buffer/index.js", "../../src/browser/buffer-shim.js", "../../node_modules/bmp-js/lib/encoder.js", "../../node_modules/bmp-js/lib/decoder.js", "../../node_modules/bmp-js/index.js", "../../src/browser/claim-builder.ts", "../../src/transactions/build-claim-opreturn.ts", "../../node_modules/cbor-x/index.js", "../../node_modules/cbor-x/encode.js", "../../node_modules/cbor-x/decode.js", "../../node_modules/cbor-x/iterators.js", "../../src/ubb-bmp.ts", "../../src/ubb-plot.ts"],
  "sourcesContent": ["'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n", "/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n", "/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n", "/**\n * Buffer polyfill for browser environment\n * This file is injected by esbuild to provide Buffer support in the browser\n */\n\nimport { Buffer } from 'buffer';\n\n// Make Buffer available globally\nwindow.Buffer = Buffer;\nexport { Buffer };\n", "/**\n * @author shaozilee\n *\n * BMP format encoder,encode 24bit BMP\n * Not support quality compression\n *\n */\n\nfunction BmpEncoder(imgData){\n\tthis.buffer = imgData.data;\n\tthis.width = imgData.width;\n\tthis.height = imgData.height;\n\tthis.extraBytes = this.width%4;\n\tthis.rgbSize = this.height*(3*this.width+this.extraBytes);\n\tthis.headerInfoSize = 40;\n\n\tthis.data = [];\n\t/******************header***********************/\n\tthis.flag = \"BM\";\n\tthis.reserved = 0;\n\tthis.offset = 54;\n\tthis.fileSize = this.rgbSize+this.offset;\n\tthis.planes = 1;\n\tthis.bitPP = 24;\n\tthis.compress = 0;\n\tthis.hr = 0;\n\tthis.vr = 0;\n\tthis.colors = 0;\n\tthis.importantColors = 0;\n}\n\nBmpEncoder.prototype.encode = function() {\n\tvar tempBuffer = new Buffer(this.offset+this.rgbSize);\n\tthis.pos = 0;\n\ttempBuffer.write(this.flag,this.pos,2);this.pos+=2;\n\ttempBuffer.writeUInt32LE(this.fileSize,this.pos);this.pos+=4;\n\ttempBuffer.writeUInt32LE(this.reserved,this.pos);this.pos+=4;\n\ttempBuffer.writeUInt32LE(this.offset,this.pos);this.pos+=4;\n\n\ttempBuffer.writeUInt32LE(this.headerInfoSize,this.pos);this.pos+=4;\n\ttempBuffer.writeUInt32LE(this.width,this.pos);this.pos+=4;\n\ttempBuffer.writeInt32LE(-this.height,this.pos);this.pos+=4;\n\ttempBuffer.writeUInt16LE(this.planes,this.pos);this.pos+=2;\n\ttempBuffer.writeUInt16LE(this.bitPP,this.pos);this.pos+=2;\n\ttempBuffer.writeUInt32LE(this.compress,this.pos);this.pos+=4;\n\ttempBuffer.writeUInt32LE(this.rgbSize,this.pos);this.pos+=4;\n\ttempBuffer.writeUInt32LE(this.hr,this.pos);this.pos+=4;\n\ttempBuffer.writeUInt32LE(this.vr,this.pos);this.pos+=4;\n\ttempBuffer.writeUInt32LE(this.colors,this.pos);this.pos+=4;\n\ttempBuffer.writeUInt32LE(this.importantColors,this.pos);this.pos+=4;\n\n\tvar i=0;\n\tvar rowBytes = 3*this.width+this.extraBytes;\n\n\tfor (var y = 0; y <this.height; y++){\n\t\tfor (var x = 0; x < this.width; x++){\n\t\t\tvar p = this.pos+y*rowBytes+x*3;\n\t\t\ti++;//a\n\t\t\ttempBuffer[p]= this.buffer[i++];//b\n\t\t\ttempBuffer[p+1] = this.buffer[i++];//g\n\t\t\ttempBuffer[p+2]  = this.buffer[i++];//r\n\t\t}\n\t\tif(this.extraBytes>0){\n\t\t\tvar fillOffset = this.pos+y*rowBytes+this.width*3;\n\t\t\ttempBuffer.fill(0,fillOffset,fillOffset+this.extraBytes);\n\t\t}\n\t}\n\n\treturn tempBuffer;\n};\n\nmodule.exports = function(imgData, quality) {\n  if (typeof quality === 'undefined') quality = 100;\n \tvar encoder = new BmpEncoder(imgData);\n\tvar data = encoder.encode();\n  return {\n    data: data,\n    width: imgData.width,\n    height: imgData.height\n  };\n};\n", "/**\n * @author shaozilee\n *\n * Bmp format decoder,support 1bit 4bit 8bit 24bit bmp\n *\n */\n\nfunction BmpDecoder(buffer,is_with_alpha) {\n  this.pos = 0;\n  this.buffer = buffer;\n  this.is_with_alpha = !!is_with_alpha;\n  this.bottom_up = true;\n  this.flag = this.buffer.toString(\"utf-8\", 0, this.pos += 2);\n  if (this.flag != \"BM\") throw new Error(\"Invalid BMP File\");\n  this.parseHeader();\n  this.parseRGBA();\n}\n\nBmpDecoder.prototype.parseHeader = function() {\n  this.fileSize = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.reserved = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.offset = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.headerSize = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.width = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.height = this.buffer.readInt32LE(this.pos);\n  this.pos += 4;\n  this.planes = this.buffer.readUInt16LE(this.pos);\n  this.pos += 2;\n  this.bitPP = this.buffer.readUInt16LE(this.pos);\n  this.pos += 2;\n  this.compress = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.rawSize = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.hr = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.vr = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.colors = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.importantColors = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n\n  if(this.bitPP === 16 && this.is_with_alpha){\n    this.bitPP = 15\n  }\n  if (this.bitPP < 15) {\n    var len = this.colors === 0 ? 1 << this.bitPP : this.colors;\n    this.palette = new Array(len);\n    for (var i = 0; i < len; i++) {\n      var blue = this.buffer.readUInt8(this.pos++);\n      var green = this.buffer.readUInt8(this.pos++);\n      var red = this.buffer.readUInt8(this.pos++);\n      var quad = this.buffer.readUInt8(this.pos++);\n      this.palette[i] = {\n        red: red,\n        green: green,\n        blue: blue,\n        quad: quad\n      };\n    }\n  }\n  if(this.height < 0) {\n    this.height *= -1;\n    this.bottom_up = false;\n  }\n\n}\n\nBmpDecoder.prototype.parseRGBA = function() {\n    var bitn = \"bit\" + this.bitPP;\n    var len = this.width * this.height * 4;\n    this.data = new Buffer(len);\n    this[bitn]();\n};\n\nBmpDecoder.prototype.bit1 = function() {\n  var xlen = Math.ceil(this.width / 8);\n  var mode = xlen%4;\n  var y = this.height >= 0 ? this.height - 1 : -this.height\n  for (var y = this.height - 1; y >= 0; y--) {\n    var line = this.bottom_up ? y : this.height - 1 - y\n    for (var x = 0; x < xlen; x++) {\n      var b = this.buffer.readUInt8(this.pos++);\n      var location = line * this.width * 4 + x*8*4;\n      for (var i = 0; i < 8; i++) {\n        if(x*8+i<this.width){\n          var rgb = this.palette[((b>>(7-i))&0x1)];\n\n          this.data[location+i*4] = 0;\n          this.data[location+i*4 + 1] = rgb.blue;\n          this.data[location+i*4 + 2] = rgb.green;\n          this.data[location+i*4 + 3] = rgb.red;\n\n        }else{\n          break;\n        }\n      }\n    }\n\n    if (mode != 0){\n      this.pos+=(4 - mode);\n    }\n  }\n};\n\nBmpDecoder.prototype.bit4 = function() {\n    //RLE-4\n    if(this.compress == 2){\n        this.data.fill(0xff);\n\n        var location = 0;\n        var lines = this.bottom_up?this.height-1:0;\n        var low_nibble = false;//for all count of pixel\n\n        while(location<this.data.length){\n            var a = this.buffer.readUInt8(this.pos++);\n            var b = this.buffer.readUInt8(this.pos++);\n            //absolute mode\n            if(a == 0){\n                if(b == 0){//line end\n                    if(this.bottom_up){\n                        lines--;\n                    }else{\n                        lines++;\n                    }\n                    location = lines*this.width*4;\n                    low_nibble = false;\n                    continue;\n                }else if(b == 1){//image end\n                    break;\n                }else if(b ==2){\n                    //offset x,y\n                    var x = this.buffer.readUInt8(this.pos++);\n                    var y = this.buffer.readUInt8(this.pos++);\n                    if(this.bottom_up){\n                        lines-=y;\n                    }else{\n                        lines+=y;\n                    }\n\n                    location +=(y*this.width*4+x*4);\n                }else{\n                    var c = this.buffer.readUInt8(this.pos++);\n                    for(var i=0;i<b;i++){\n                        if (low_nibble) {\n                            setPixelData.call(this, (c & 0x0f));\n                        } else {\n                            setPixelData.call(this, (c & 0xf0)>>4);\n                        }\n\n                        if ((i & 1) && (i+1 < b)){\n                            c = this.buffer.readUInt8(this.pos++);\n                        }\n\n                        low_nibble = !low_nibble;\n                    }\n\n                    if ((((b+1) >> 1) & 1 ) == 1){\n                        this.pos++\n                    }\n                }\n\n            }else{//encoded mode\n                for (var i = 0; i < a; i++) {\n                    if (low_nibble) {\n                        setPixelData.call(this, (b & 0x0f));\n                    } else {\n                        setPixelData.call(this, (b & 0xf0)>>4);\n                    }\n                    low_nibble = !low_nibble;\n                }\n            }\n\n        }\n\n\n\n\n        function setPixelData(rgbIndex){\n            var rgb = this.palette[rgbIndex];\n            this.data[location] = 0;\n            this.data[location + 1] = rgb.blue;\n            this.data[location + 2] = rgb.green;\n            this.data[location + 3] = rgb.red;\n            location+=4;\n        }\n    }else{\n\n      var xlen = Math.ceil(this.width/2);\n      var mode = xlen%4;\n      for (var y = this.height - 1; y >= 0; y--) {\n        var line = this.bottom_up ? y : this.height - 1 - y\n        for (var x = 0; x < xlen; x++) {\n          var b = this.buffer.readUInt8(this.pos++);\n          var location = line * this.width * 4 + x*2*4;\n\n          var before = b>>4;\n          var after = b&0x0F;\n\n          var rgb = this.palette[before];\n          this.data[location] = 0;\n          this.data[location + 1] = rgb.blue;\n          this.data[location + 2] = rgb.green;\n          this.data[location + 3] = rgb.red;\n\n\n          if(x*2+1>=this.width)break;\n\n          rgb = this.palette[after];\n\n          this.data[location+4] = 0;\n          this.data[location+4 + 1] = rgb.blue;\n          this.data[location+4 + 2] = rgb.green;\n          this.data[location+4 + 3] = rgb.red;\n\n        }\n\n        if (mode != 0){\n          this.pos+=(4 - mode);\n        }\n      }\n\n    }\n\n};\n\nBmpDecoder.prototype.bit8 = function() {\n    //RLE-8\n    if(this.compress == 1){\n        this.data.fill(0xff);\n\n        var location = 0;\n        var lines = this.bottom_up?this.height-1:0;\n\n        while(location<this.data.length){\n            var a = this.buffer.readUInt8(this.pos++);\n            var b = this.buffer.readUInt8(this.pos++);\n            //absolute mode\n            if(a == 0){\n                if(b == 0){//line end\n                    if(this.bottom_up){\n                        lines--;\n                    }else{\n                        lines++;\n                    }\n                    location = lines*this.width*4;\n                    continue;\n                }else if(b == 1){//image end\n                    break;\n                }else if(b ==2){\n                    //offset x,y\n                    var x = this.buffer.readUInt8(this.pos++);\n                    var y = this.buffer.readUInt8(this.pos++);\n                    if(this.bottom_up){\n                        lines-=y;\n                    }else{\n                        lines+=y;\n                    }\n\n                    location +=(y*this.width*4+x*4);\n                }else{\n                    for(var i=0;i<b;i++){\n                        var c = this.buffer.readUInt8(this.pos++);\n                        setPixelData.call(this, c);\n                    }\n                    if(b&1 == 1){\n                        this.pos++;\n                    }\n\n                }\n\n            }else{//encoded mode\n                for (var i = 0; i < a; i++) {\n                    setPixelData.call(this, b);\n                }\n            }\n\n        }\n\n\n\n\n        function setPixelData(rgbIndex){\n            var rgb = this.palette[rgbIndex];\n            this.data[location] = 0;\n            this.data[location + 1] = rgb.blue;\n            this.data[location + 2] = rgb.green;\n            this.data[location + 3] = rgb.red;\n            location+=4;\n        }\n    }else {\n        var mode = this.width % 4;\n        for (var y = this.height - 1; y >= 0; y--) {\n            var line = this.bottom_up ? y : this.height - 1 - y\n            for (var x = 0; x < this.width; x++) {\n                var b = this.buffer.readUInt8(this.pos++);\n                var location = line * this.width * 4 + x * 4;\n                if (b < this.palette.length) {\n                    var rgb = this.palette[b];\n\n                    this.data[location] = 0;\n                    this.data[location + 1] = rgb.blue;\n                    this.data[location + 2] = rgb.green;\n                    this.data[location + 3] = rgb.red;\n\n                } else {\n                    this.data[location] = 0;\n                    this.data[location + 1] = 0xFF;\n                    this.data[location + 2] = 0xFF;\n                    this.data[location + 3] = 0xFF;\n                }\n            }\n            if (mode != 0) {\n                this.pos += (4 - mode);\n            }\n        }\n    }\n};\n\nBmpDecoder.prototype.bit15 = function() {\n  var dif_w =this.width % 3;\n  var _11111 = parseInt(\"11111\", 2),_1_5 = _11111;\n  for (var y = this.height - 1; y >= 0; y--) {\n    var line = this.bottom_up ? y : this.height - 1 - y\n    for (var x = 0; x < this.width; x++) {\n\n      var B = this.buffer.readUInt16LE(this.pos);\n      this.pos+=2;\n      var blue = (B & _1_5) / _1_5 * 255 | 0;\n      var green = (B >> 5 & _1_5 ) / _1_5 * 255 | 0;\n      var red = (B >> 10 & _1_5) / _1_5 * 255 | 0;\n      var alpha = (B>>15)?0xFF:0x00;\n\n      var location = line * this.width * 4 + x * 4;\n\n      this.data[location] = alpha;\n      this.data[location + 1] = blue;\n      this.data[location + 2] = green;\n      this.data[location + 3] = red;\n    }\n    //skip extra bytes\n    this.pos += dif_w;\n  }\n};\n\nBmpDecoder.prototype.bit16 = function() {\n  var dif_w =(this.width % 2)*2;\n  //default xrgb555\n  this.maskRed = 0x7C00;\n  this.maskGreen = 0x3E0;\n  this.maskBlue =0x1F;\n  this.mask0 = 0;\n\n  if(this.compress == 3){\n    this.maskRed = this.buffer.readUInt32LE(this.pos);\n    this.pos+=4;\n    this.maskGreen = this.buffer.readUInt32LE(this.pos);\n    this.pos+=4;\n    this.maskBlue = this.buffer.readUInt32LE(this.pos);\n    this.pos+=4;\n    this.mask0 = this.buffer.readUInt32LE(this.pos);\n    this.pos+=4;\n  }\n\n\n  var ns=[0,0,0];\n  for (var i=0;i<16;i++){\n    if ((this.maskRed>>i)&0x01) ns[0]++;\n    if ((this.maskGreen>>i)&0x01) ns[1]++;\n    if ((this.maskBlue>>i)&0x01) ns[2]++;\n  }\n  ns[1]+=ns[0]; ns[2]+=ns[1];\tns[0]=8-ns[0]; ns[1]-=8; ns[2]-=8;\n\n  for (var y = this.height - 1; y >= 0; y--) {\n    var line = this.bottom_up ? y : this.height - 1 - y;\n    for (var x = 0; x < this.width; x++) {\n\n      var B = this.buffer.readUInt16LE(this.pos);\n      this.pos+=2;\n\n      var blue = (B&this.maskBlue)<<ns[0];\n      var green = (B&this.maskGreen)>>ns[1];\n      var red = (B&this.maskRed)>>ns[2];\n\n      var location = line * this.width * 4 + x * 4;\n\n      this.data[location] = 0;\n      this.data[location + 1] = blue;\n      this.data[location + 2] = green;\n      this.data[location + 3] = red;\n    }\n    //skip extra bytes\n    this.pos += dif_w;\n  }\n};\n\nBmpDecoder.prototype.bit24 = function() {\n  for (var y = this.height - 1; y >= 0; y--) {\n    var line = this.bottom_up ? y : this.height - 1 - y\n    for (var x = 0; x < this.width; x++) {\n      //Little Endian rgb\n      var blue = this.buffer.readUInt8(this.pos++);\n      var green = this.buffer.readUInt8(this.pos++);\n      var red = this.buffer.readUInt8(this.pos++);\n      var location = line * this.width * 4 + x * 4;\n      this.data[location] = 0;\n      this.data[location + 1] = blue;\n      this.data[location + 2] = green;\n      this.data[location + 3] = red;\n    }\n    //skip extra bytes\n    this.pos += (this.width % 4);\n  }\n\n};\n\n/**\n * add 32bit decode func\n * @author soubok\n */\nBmpDecoder.prototype.bit32 = function() {\n  //BI_BITFIELDS\n  if(this.compress == 3){\n    this.maskRed = this.buffer.readUInt32LE(this.pos);\n    this.pos+=4;\n    this.maskGreen = this.buffer.readUInt32LE(this.pos);\n    this.pos+=4;\n    this.maskBlue = this.buffer.readUInt32LE(this.pos);\n    this.pos+=4;\n    this.mask0 = this.buffer.readUInt32LE(this.pos);\n    this.pos+=4;\n      for (var y = this.height - 1; y >= 0; y--) {\n          var line = this.bottom_up ? y : this.height - 1 - y;\n          for (var x = 0; x < this.width; x++) {\n              //Little Endian rgba\n              var alpha = this.buffer.readUInt8(this.pos++);\n              var blue = this.buffer.readUInt8(this.pos++);\n              var green = this.buffer.readUInt8(this.pos++);\n              var red = this.buffer.readUInt8(this.pos++);\n              var location = line * this.width * 4 + x * 4;\n              this.data[location] = alpha;\n              this.data[location + 1] = blue;\n              this.data[location + 2] = green;\n              this.data[location + 3] = red;\n          }\n      }\n\n  }else{\n      for (var y = this.height - 1; y >= 0; y--) {\n          var line = this.bottom_up ? y : this.height - 1 - y;\n          for (var x = 0; x < this.width; x++) {\n              //Little Endian argb\n              var blue = this.buffer.readUInt8(this.pos++);\n              var green = this.buffer.readUInt8(this.pos++);\n              var red = this.buffer.readUInt8(this.pos++);\n              var alpha = this.buffer.readUInt8(this.pos++);\n              var location = line * this.width * 4 + x * 4;\n              this.data[location] = alpha;\n              this.data[location + 1] = blue;\n              this.data[location + 2] = green;\n              this.data[location + 3] = red;\n          }\n      }\n\n  }\n\n\n\n\n};\n\nBmpDecoder.prototype.getData = function() {\n  return this.data;\n};\n\nmodule.exports = function(bmpData) {\n  var decoder = new BmpDecoder(bmpData);\n  return decoder;\n};\n", "/**\n * @author shaozilee\n *\n * support 1bit 4bit 8bit 24bit decode\n * encode with 24bit\n * \n */\n\nvar encode = require('./lib/encoder'),\n    decode = require('./lib/decoder');\n\nmodule.exports = {\n  encode: encode,\n  decode: decode\n};\n", "/**\n * Browser entry point for UBB Claim Builder\n * Exports buildClaimOpReturnHex function for use in browser\n */\n\nimport { buildClaimOpReturnHex, ClaimBuildResult } from '../transactions/build-claim-opreturn';\n\n// Expose to global window object for browser usage\ndeclare const window: any;\nif (typeof window !== 'undefined') {\n  window.UBBClaimBuilder = {\n    buildClaimOpReturnHex\n  };\n}\n\nexport { buildClaimOpReturnHex };\nexport type { ClaimBuildResult };\n", "import { encode as cborEncode } from 'cbor-x';\nimport { UBBBMP } from '../ubb-bmp';\nimport { UBBPlot } from '../ubb-plot';\n\n/**\n * Result type for CLAIM OP_RETURN builder\n */\nexport type ClaimBuildResult = \n  | { ok: true; hex: string }\n  | { ok: false; errors: { x?: string[]; y?: string[]; uri?: string[]; bmp?: string[] } };\n\n/**\n * Builds a CLAIM transaction OP_RETURN payload as hex\n * \n * Validates all inputs according to UBB protocol rules:\n * - x, y: must be integers in [0, 65535]\n * - bmpHex: must be valid hex encoding a valid 24/32-bit uncompressed BMP\n * - uri: defaults to empty string; must be a valid string\n * - placement: the plot must fit within the 65536\u00D765536 canvas\n * \n * @param x X coordinate (0-65535)\n * @param y Y coordinate (0-65535)\n * @param bmpHex BMP file as hex string (no 0x prefix)\n * @returns ClaimBuildResult with hex or errors\n */\nexport function buildClaimOpReturnHex(x: number, y: number, bmpHex: string): ClaimBuildResult;\n\n/**\n * Builds a CLAIM transaction OP_RETURN payload as hex with URI\n * \n * @param x X coordinate (0-65535)\n * @param y Y coordinate (0-65535)\n * @param uri URI string (can be empty)\n * @param bmpHex BMP file as hex string (no 0x prefix)\n * @returns ClaimBuildResult with hex or errors\n */\nexport function buildClaimOpReturnHex(x: number, y: number, uri: string, bmpHex: string): ClaimBuildResult;\n\n// Implementation\nexport function buildClaimOpReturnHex(\n  x: number,\n  y: number,\n  uriOrBmpHex: string,\n  maybeBmpHex?: string\n): ClaimBuildResult {\n  // Determine which overload was called\n  const uri = maybeBmpHex !== undefined ? uriOrBmpHex : '';\n  const bmpHex = maybeBmpHex !== undefined ? maybeBmpHex : uriOrBmpHex;\n\n  const errors: { x?: string[]; y?: string[]; uri?: string[]; bmp?: string[] } = {};\n\n  // Validate X coordinate\n  const xErrors = validateCoordinate(x, 'x');\n  if (xErrors.length > 0) {\n    errors.x = xErrors;\n  }\n\n  // Validate Y coordinate\n  const yErrors = validateCoordinate(y, 'y');\n  if (yErrors.length > 0) {\n    errors.y = yErrors;\n  }\n\n  // Validate URI\n  const uriErrors = validateUri(uri);\n  if (uriErrors.length > 0) {\n    errors.uri = uriErrors;\n  }\n\n  // Validate BMP hex and decode\n  let bmpBuffer: Buffer | null = null;\n  let ubbbmp: UBBBMP | null = null;\n  const bmpHexErrors = validateBmpHex(bmpHex);\n  \n  if (bmpHexErrors.length > 0) {\n    errors.bmp = bmpHexErrors;\n  } else {\n    // Decode hex to buffer\n    try {\n      bmpBuffer = Buffer.from(bmpHex, 'hex');\n      \n      // Validate BMP format\n      ubbbmp = new UBBBMP(bmpBuffer);\n      if (!ubbbmp.isValid) {\n        errors.bmp = [...ubbbmp.validationErrors];\n      }\n    } catch (error) {\n      errors.bmp = [`Failed to decode BMP: ${error instanceof Error ? error.message : 'Unknown error'}`];\n    }\n  }\n\n  // Validate placement (bounds check) if we have valid inputs\n  if (ubbbmp && ubbbmp.isValid && !errors.x && !errors.y) {\n    const plot = new UBBPlot(ubbbmp, x, y);\n    if (!plot.isValid) {\n      const placementErrors = [...plot.validationErrors];\n      if (placementErrors.length > 0) {\n        // Attach placement errors to both x and y\n        errors.x = [...(errors.x || []), ...placementErrors];\n        errors.y = [...(errors.y || []), ...placementErrors];\n      }\n    }\n  }\n\n  // If any errors, return them\n  if (Object.keys(errors).length > 0) {\n    return { ok: false, errors };\n  }\n\n  // Build the OP_RETURN payload\n  try {\n    const payload = buildPayload(x, y, uri, bmpBuffer!);\n    return { ok: true, hex: payload.toString('hex') };\n  } catch (error) {\n    return {\n      ok: false,\n      errors: {\n        bmp: [`Failed to build payload: ${error instanceof Error ? error.message : 'Unknown error'}`]\n      }\n    };\n  }\n}\n\n/**\n * Validates a coordinate (x or y)\n */\nfunction validateCoordinate(coord: number, name: string): string[] {\n  const errors: string[] = [];\n\n  if (typeof coord !== 'number') {\n    errors.push(`${name} must be a number`);\n    return errors;\n  }\n\n  if (!Number.isFinite(coord)) {\n    errors.push(`${name} must be a finite number`);\n    return errors;\n  }\n\n  if (!Number.isInteger(coord)) {\n    errors.push(`${name} must be an integer`);\n  }\n\n  if (coord < 0) {\n    errors.push(`${name} must be non-negative (got ${coord})`);\n  }\n\n  if (coord > 65535) {\n    errors.push(`${name} must be at most 65535 (got ${coord})`);\n  }\n\n  return errors;\n}\n\n/**\n * Validates a URI string\n */\nfunction validateUri(uri: string): string[] {\n  const errors: string[] = [];\n\n  if (typeof uri !== 'string') {\n    errors.push('URI must be a string');\n  }\n\n  return errors;\n}\n\n/**\n * Validates BMP hex string\n */\nfunction validateBmpHex(bmpHex: string): string[] {\n  const errors: string[] = [];\n\n  if (typeof bmpHex !== 'string') {\n    errors.push('BMP hex must be a string');\n    return errors;\n  }\n\n  if (bmpHex.length === 0) {\n    errors.push('BMP hex must not be empty');\n    return errors;\n  }\n\n  if (bmpHex.length % 2 !== 0) {\n    errors.push('BMP hex must have even length');\n  }\n\n  if (!/^[0-9a-fA-F]*$/.test(bmpHex)) {\n    errors.push('BMP hex contains invalid characters (must be 0-9, a-f, A-F)');\n  }\n\n  return errors;\n}\n\n/**\n * Builds the complete OP_RETURN payload\n * Format: [0x13,0x37] | [0x01] | [0x01] | xLE(2) | yLE(2) | CBOR(uri) | BMP(...)\n */\nfunction buildPayload(x: number, y: number, uri: string, bmpBuffer: Buffer): Buffer {\n  // Magic bytes\n  const magic = Buffer.from([0x13, 0x37]);\n  \n  // Version\n  const version = Buffer.from([0x01]);\n  \n  // Transaction type (CLAIM = 0x01)\n  const txType = Buffer.from([0x01]);\n  \n  // Coordinates (little-endian 16-bit)\n  const xBuffer = Buffer.allocUnsafe(2);\n  xBuffer.writeUInt16LE(x, 0);\n  \n  const yBuffer = Buffer.allocUnsafe(2);\n  yBuffer.writeUInt16LE(y, 0);\n  \n  // URI (CBOR-encoded text string)\n  const uriBuffer = cborEncode(uri);\n  \n  // Concatenate all parts\n  return Buffer.concat([\n    magic,\n    version,\n    txType,\n    xBuffer,\n    yBuffer,\n    uriBuffer,\n    bmpBuffer\n  ]);\n}\n", "export { Encoder, addExtension, encode, encodeAsIterable, encodeAsAsyncIterable, NEVER, ALWAYS, DECIMAL_ROUND, DECIMAL_FIT, REUSE_BUFFER_MODE } from './encode.js'\nexport { Tag, Decoder, decodeMultiple, decode, FLOAT32_OPTIONS, clearSource, roundFloat32, isNativeAccelerationEnabled, setSizeLimits } from './decode.js'\nexport { decodeIter, encodeIter } from './iterators.js'\n", "import { Decoder, mult10, Tag, typedArrays, addExtension as decodeAddExtension } from './decode.js'\nlet textEncoder\ntry {\n\ttextEncoder = new TextEncoder()\n} catch (error) {}\nlet extensions, extensionClasses\nconst Buffer = typeof globalThis === 'object' && globalThis.Buffer;\nconst hasNodeBuffer = typeof Buffer !== 'undefined'\nconst ByteArrayAllocate = hasNodeBuffer ? Buffer.allocUnsafeSlow : Uint8Array\nconst ByteArray = hasNodeBuffer ? Buffer : Uint8Array\nconst MAX_STRUCTURES = 0x100\nconst MAX_BUFFER_SIZE = hasNodeBuffer ? 0x100000000 : 0x7fd00000\nlet serializationId = 1\nlet throwOnIterable\nlet target\nlet targetView\nlet position = 0\nlet safeEnd\nlet bundledStrings = null\nconst MAX_BUNDLE_SIZE = 0xf000\nconst hasNonLatin = /[\\u0080-\\uFFFF]/\nconst RECORD_SYMBOL = Symbol('record-id')\nexport class Encoder extends Decoder {\n\tconstructor(options) {\n\t\tsuper(options)\n\t\tthis.offset = 0\n\t\tlet typeBuffer\n\t\tlet start\n\t\tlet sharedStructures\n\t\tlet hasSharedUpdate\n\t\tlet structures\n\t\tlet referenceMap\n\t\toptions = options || {}\n\t\tlet encodeUtf8 = ByteArray.prototype.utf8Write ? function(string, position, maxBytes) {\n\t\t\treturn target.utf8Write(string, position, maxBytes)\n\t\t} : (textEncoder && textEncoder.encodeInto) ?\n\t\t\tfunction(string, position) {\n\t\t\t\treturn textEncoder.encodeInto(string, target.subarray(position)).written\n\t\t\t} : false\n\n\t\tlet encoder = this\n\t\tlet hasSharedStructures = options.structures || options.saveStructures\n\t\tlet maxSharedStructures = options.maxSharedStructures\n\t\tif (maxSharedStructures == null)\n\t\t\tmaxSharedStructures = hasSharedStructures ? 128 : 0\n\t\tif (maxSharedStructures > 8190)\n\t\t\tthrow new Error('Maximum maxSharedStructure is 8190')\n\t\tlet isSequential = options.sequential\n\t\tif (isSequential) {\n\t\t\tmaxSharedStructures = 0\n\t\t}\n\t\tif (!this.structures)\n\t\t\tthis.structures = []\n\t\tif (this.saveStructures)\n\t\t\tthis.saveShared = this.saveStructures\n\t\tlet samplingPackedValues, packedObjectMap, sharedValues = options.sharedValues\n\t\tlet sharedPackedObjectMap\n\t\tif (sharedValues) {\n\t\t\tsharedPackedObjectMap = Object.create(null)\n\t\t\tfor (let i = 0, l = sharedValues.length; i < l; i++) {\n\t\t\t\tsharedPackedObjectMap[sharedValues[i]] = i\n\t\t\t}\n\t\t}\n\t\tlet recordIdsToRemove = []\n\t\tlet transitionsCount = 0\n\t\tlet serializationsSinceTransitionRebuild = 0\n\t\t\n\t\tthis.mapEncode = function(value, encodeOptions) {\n\t\t\t// Experimental support for premapping keys using _keyMap instad of keyMap - not optiimised yet)\n\t\t\tif (this._keyMap && !this._mapped) {\n\t\t\t\t//console.log('encoding ', value)\n\t\t\t\tswitch (value.constructor.name) {\n\t\t\t\t\tcase 'Array': \n\t\t\t\t\t\tvalue = value.map(r => this.encodeKeys(r))\n\t\t\t\t\t\tbreak\n\t\t\t\t\t//case 'Map': \n\t\t\t\t\t//\tvalue = this.encodeKeys(value)\n\t\t\t\t\t//\tbreak\n\t\t\t\t}\n\t\t\t\t//this._mapped = true\n\t\t\t}\n\t\t\treturn this.encode(value, encodeOptions)\n\t\t}\n\t\t\n\t\tthis.encode = function(value, encodeOptions)\t{\n\t\t\tif (!target) {\n\t\t\t\ttarget = new ByteArrayAllocate(8192)\n\t\t\t\ttargetView = new DataView(target.buffer, 0, 8192)\n\t\t\t\tposition = 0\n\t\t\t}\n\t\t\tsafeEnd = target.length - 10\n\t\t\tif (safeEnd - position < 0x800) {\n\t\t\t\t// don't start too close to the end, \n\t\t\t\ttarget = new ByteArrayAllocate(target.length)\n\t\t\t\ttargetView = new DataView(target.buffer, 0, target.length)\n\t\t\t\tsafeEnd = target.length - 10\n\t\t\t\tposition = 0\n\t\t\t} else if (encodeOptions === REUSE_BUFFER_MODE)\n\t\t\t\tposition = (position + 7) & 0x7ffffff8 // Word align to make any future copying of this buffer faster\n\t\t\tstart = position\n\t\t\tif (encoder.useSelfDescribedHeader) {\n\t\t\t\ttargetView.setUint32(position, 0xd9d9f700) // tag two byte, then self-descriptive tag\n\t\t\t\tposition += 3\n\t\t\t}\n\t\t\treferenceMap = encoder.structuredClone ? new Map() : null\n\t\t\tif (encoder.bundleStrings && typeof value !== 'string') {\n\t\t\t\tbundledStrings = []\n\t\t\t\tbundledStrings.size = Infinity // force a new bundle start on first string\n\t\t\t} else\n\t\t\t\tbundledStrings = null\n\n\t\t\tsharedStructures = encoder.structures\n\t\t\tif (sharedStructures) {\n\t\t\t\tif (sharedStructures.uninitialized) {\n\t\t\t\t\tlet sharedData = encoder.getShared() || {}\n\t\t\t\t\tencoder.structures = sharedStructures = sharedData.structures || []\n\t\t\t\t\tencoder.sharedVersion = sharedData.version\n\t\t\t\t\tlet sharedValues = encoder.sharedValues = sharedData.packedValues\n\t\t\t\t\tif (sharedValues) {\n\t\t\t\t\t\tsharedPackedObjectMap = {}\n\t\t\t\t\t\tfor (let i = 0, l = sharedValues.length; i < l; i++)\n\t\t\t\t\t\t\tsharedPackedObjectMap[sharedValues[i]] = i\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlet sharedStructuresLength = sharedStructures.length\n\t\t\t\tif (sharedStructuresLength > maxSharedStructures && !isSequential)\n\t\t\t\t\tsharedStructuresLength = maxSharedStructures\n\t\t\t\tif (!sharedStructures.transitions) {\n\t\t\t\t\t// rebuild our structure transitions\n\t\t\t\t\tsharedStructures.transitions = Object.create(null)\n\t\t\t\t\tfor (let i = 0; i < sharedStructuresLength; i++) {\n\t\t\t\t\t\tlet keys = sharedStructures[i]\n\t\t\t\t\t\t//console.log('shared struct keys:', keys)\n\t\t\t\t\t\tif (!keys)\n\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\tlet nextTransition, transition = sharedStructures.transitions\n\t\t\t\t\t\tfor (let j = 0, l = keys.length; j < l; j++) {\n\t\t\t\t\t\t\tif (transition[RECORD_SYMBOL] === undefined)\n\t\t\t\t\t\t\t\ttransition[RECORD_SYMBOL] = i\n\t\t\t\t\t\t\tlet key = keys[j]\n\t\t\t\t\t\t\tnextTransition = transition[key]\n\t\t\t\t\t\t\tif (!nextTransition) {\n\t\t\t\t\t\t\t\tnextTransition = transition[key] = Object.create(null)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttransition = nextTransition\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttransition[RECORD_SYMBOL] = i | 0x100000\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!isSequential)\n\t\t\t\t\tsharedStructures.nextId = sharedStructuresLength\n\t\t\t}\n\t\t\tif (hasSharedUpdate)\n\t\t\t\thasSharedUpdate = false\n\t\t\tstructures = sharedStructures || []\n\t\t\tpackedObjectMap = sharedPackedObjectMap\n\t\t\tif (options.pack) {\n\t\t\t\tlet packedValues = new Map()\n\t\t\t\tpackedValues.values = []\n\t\t\t\tpackedValues.encoder = encoder\n\t\t\t\tpackedValues.maxValues = options.maxPrivatePackedValues || (sharedPackedObjectMap ? 16 : Infinity)\n\t\t\t\tpackedValues.objectMap = sharedPackedObjectMap || false\n\t\t\t\tpackedValues.samplingPackedValues = samplingPackedValues\n\t\t\t\tfindRepetitiveStrings(value, packedValues)\n\t\t\t\tif (packedValues.values.length > 0) {\n\t\t\t\t\ttarget[position++] = 0xd8 // one-byte tag\n\t\t\t\t\ttarget[position++] = 51 // tag 51 for packed shared structures https://www.potaroo.net/ietf/ids/draft-ietf-cbor-packed-03.txt\n\t\t\t\t\twriteArrayHeader(4)\n\t\t\t\t\tlet valuesArray = packedValues.values\n\t\t\t\t\tencode(valuesArray)\n\t\t\t\t\twriteArrayHeader(0) // prefixes\n\t\t\t\t\twriteArrayHeader(0) // suffixes\n\t\t\t\t\tpackedObjectMap = Object.create(sharedPackedObjectMap || null)\n\t\t\t\t\tfor (let i = 0, l = valuesArray.length; i < l; i++) {\n\t\t\t\t\t\tpackedObjectMap[valuesArray[i]] = i\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrowOnIterable = encodeOptions & THROW_ON_ITERABLE;\n\t\t\ttry {\n\t\t\t\tif (throwOnIterable)\n\t\t\t\t\treturn;\n\t\t\t\tencode(value)\n\t\t\t\tif (bundledStrings) {\n\t\t\t\t\twriteBundles(start, encode)\n\t\t\t\t}\n\t\t\t\tencoder.offset = position // update the offset so next serialization doesn't write over our buffer, but can continue writing to same buffer sequentially\n\t\t\t\tif (referenceMap && referenceMap.idsToInsert) {\n\t\t\t\t\tposition += referenceMap.idsToInsert.length * 2\n\t\t\t\t\tif (position > safeEnd)\n\t\t\t\t\t\tmakeRoom(position)\n\t\t\t\t\tencoder.offset = position\n\t\t\t\t\tlet serialized = insertIds(target.subarray(start, position), referenceMap.idsToInsert)\n\t\t\t\t\treferenceMap = null\n\t\t\t\t\treturn serialized\n\t\t\t\t}\n\t\t\t\tif (encodeOptions & REUSE_BUFFER_MODE) {\n\t\t\t\t\ttarget.start = start\n\t\t\t\t\ttarget.end = position\n\t\t\t\t\treturn target\n\t\t\t\t}\n\t\t\t\treturn target.subarray(start, position) // position can change if we call encode again in saveShared, so we get the buffer now\n\t\t\t} finally {\n\t\t\t\tif (sharedStructures) {\n\t\t\t\t\tif (serializationsSinceTransitionRebuild < 10)\n\t\t\t\t\t\tserializationsSinceTransitionRebuild++\n\t\t\t\t\tif (sharedStructures.length > maxSharedStructures)\n\t\t\t\t\t\tsharedStructures.length = maxSharedStructures\n\t\t\t\t\tif (transitionsCount > 10000) {\n\t\t\t\t\t\t// force a rebuild occasionally after a lot of transitions so it can get cleaned up\n\t\t\t\t\t\tsharedStructures.transitions = null\n\t\t\t\t\t\tserializationsSinceTransitionRebuild = 0\n\t\t\t\t\t\ttransitionsCount = 0\n\t\t\t\t\t\tif (recordIdsToRemove.length > 0)\n\t\t\t\t\t\t\trecordIdsToRemove = []\n\t\t\t\t\t} else if (recordIdsToRemove.length > 0 && !isSequential) {\n\t\t\t\t\t\tfor (let i = 0, l = recordIdsToRemove.length; i < l; i++) {\n\t\t\t\t\t\t\trecordIdsToRemove[i][RECORD_SYMBOL] = undefined\n\t\t\t\t\t\t}\n\t\t\t\t\t\trecordIdsToRemove = []\n\t\t\t\t\t\t//sharedStructures.nextId = maxSharedStructures\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (hasSharedUpdate && encoder.saveShared) {\n\t\t\t\t\tif (encoder.structures.length > maxSharedStructures) {\n\t\t\t\t\t\tencoder.structures = encoder.structures.slice(0, maxSharedStructures)\n\t\t\t\t\t}\n\t\t\t\t\t// we can't rely on start/end with REUSE_BUFFER_MODE since they will (probably) change when we save\n\t\t\t\t\tlet returnBuffer = target.subarray(start, position)\n\t\t\t\t\tif (encoder.updateSharedData() === false)\n\t\t\t\t\t\treturn encoder.encode(value) // re-encode if it fails\n\t\t\t\t\treturn returnBuffer\n\t\t\t\t}\n\t\t\t\tif (encodeOptions & RESET_BUFFER_MODE)\n\t\t\t\t\tposition = start\n\t\t\t}\n\t\t}\n\t\tthis.findCommonStringsToPack = () => {\n\t\t\tsamplingPackedValues = new Map()\n\t\t\tif (!sharedPackedObjectMap)\n\t\t\t\tsharedPackedObjectMap = Object.create(null)\n\t\t\treturn (options) => {\n\t\t\t\tlet threshold = options && options.threshold || 4\n\t\t\t\tlet position = this.pack ? options.maxPrivatePackedValues || 16 : 0\n\t\t\t\tif (!sharedValues)\n\t\t\t\t\tsharedValues = this.sharedValues = []\n\t\t\t\tfor (let [ key, status ] of samplingPackedValues) {\n\t\t\t\t\tif (status.count > threshold) {\n\t\t\t\t\t\tsharedPackedObjectMap[key] = position++\n\t\t\t\t\t\tsharedValues.push(key)\n\t\t\t\t\t\thasSharedUpdate = true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\twhile (this.saveShared && this.updateSharedData() === false) {}\n\t\t\t\tsamplingPackedValues = null\n\t\t\t}\n\t\t}\n\t\tconst encode = (value) => {\n\t\t\tif (position > safeEnd)\n\t\t\t\ttarget = makeRoom(position)\n\n\t\t\tvar type = typeof value\n\t\t\tvar length\n\t\t\tif (type === 'string') {\n\t\t\t\tif (packedObjectMap) {\n\t\t\t\t\tlet packedPosition = packedObjectMap[value]\n\t\t\t\t\tif (packedPosition >= 0) {\n\t\t\t\t\t\tif (packedPosition < 16)\n\t\t\t\t\t\t\ttarget[position++] = packedPosition + 0xe0 // simple values, defined in https://www.potaroo.net/ietf/ids/draft-ietf-cbor-packed-03.txt\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\ttarget[position++] = 0xc6 // tag 6 defined in https://www.potaroo.net/ietf/ids/draft-ietf-cbor-packed-03.txt\n\t\t\t\t\t\t\tif (packedPosition & 1)\n\t\t\t\t\t\t\t\tencode((15 - packedPosition) >> 1)\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tencode((packedPosition - 16) >> 1)\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn\n/*\t\t\t\t\t\t} else if (packedStatus.serializationId != serializationId) {\n\t\t\t\t\t\t\tpackedStatus.serializationId = serializationId\n\t\t\t\t\t\t\tpackedStatus.count = 1\n\t\t\t\t\t\t\tif (options.sharedPack) {\n\t\t\t\t\t\t\t\tlet sharedCount = packedStatus.sharedCount = (packedStatus.sharedCount || 0) + 1\n\t\t\t\t\t\t\t\tif (shareCount > (options.sharedPack.threshold || 5)) {\n\t\t\t\t\t\t\t\t\tlet sharedPosition = packedStatus.position = packedStatus.nextSharedPosition\n\t\t\t\t\t\t\t\t\thasSharedUpdate = true\n\t\t\t\t\t\t\t\t\tif (sharedPosition < 16)\n\t\t\t\t\t\t\t\t\t\ttarget[position++] = sharedPosition + 0xc0\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} // else any in-doc incrementation?*/\n\t\t\t\t\t} else if (samplingPackedValues && !options.pack) {\n\t\t\t\t\t\tlet status = samplingPackedValues.get(value)\n\t\t\t\t\t\tif (status)\n\t\t\t\t\t\t\tstatus.count++\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tsamplingPackedValues.set(value, {\n\t\t\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlet strLength = value.length\n\t\t\t\tif (bundledStrings && strLength >= 4 && strLength < 0x400) {\n\t\t\t\t\tif ((bundledStrings.size += strLength) > MAX_BUNDLE_SIZE) {\n\t\t\t\t\t\tlet extStart\n\t\t\t\t\t\tlet maxBytes = (bundledStrings[0] ? bundledStrings[0].length * 3 + bundledStrings[1].length : 0) + 10\n\t\t\t\t\t\tif (position + maxBytes > safeEnd)\n\t\t\t\t\t\t\ttarget = makeRoom(position + maxBytes)\n\t\t\t\t\t\ttarget[position++] = 0xd9 // tag 16-bit\n\t\t\t\t\t\ttarget[position++] = 0xdf // tag 0xdff9\n\t\t\t\t\t\ttarget[position++] = 0xf9\n\t\t\t\t\t\t// TODO: If we only have one bundle with any string data, only write one string bundle\n\t\t\t\t\t\ttarget[position++] = bundledStrings.position ? 0x84 : 0x82 // array of 4 or 2 elements depending on if we write bundles\n\t\t\t\t\t\ttarget[position++] = 0x1a // 32-bit unsigned int\n\t\t\t\t\t\textStart = position - start\n\t\t\t\t\t\tposition += 4 // reserve for writing bundle reference\n\t\t\t\t\t\tif (bundledStrings.position) {\n\t\t\t\t\t\t\twriteBundles(start, encode) // write the last bundles\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbundledStrings = ['', ''] // create new ones\n\t\t\t\t\t\tbundledStrings.size = 0\n\t\t\t\t\t\tbundledStrings.position = extStart\n\t\t\t\t\t}\n\t\t\t\t\tlet twoByte = hasNonLatin.test(value)\n\t\t\t\t\tbundledStrings[twoByte ? 0 : 1] += value\n\t\t\t\t\ttarget[position++] = twoByte ? 0xce : 0xcf\n\t\t\t\t\tencode(strLength);\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tlet headerSize\n\t\t\t\t// first we estimate the header size, so we can write to the correct location\n\t\t\t\tif (strLength < 0x20) {\n\t\t\t\t\theaderSize = 1\n\t\t\t\t} else if (strLength < 0x100) {\n\t\t\t\t\theaderSize = 2\n\t\t\t\t} else if (strLength < 0x10000) {\n\t\t\t\t\theaderSize = 3\n\t\t\t\t} else {\n\t\t\t\t\theaderSize = 5\n\t\t\t\t}\n\t\t\t\tlet maxBytes = strLength * 3\n\t\t\t\tif (position + maxBytes > safeEnd)\n\t\t\t\t\ttarget = makeRoom(position + maxBytes)\n\n\t\t\t\tif (strLength < 0x40 || !encodeUtf8) {\n\t\t\t\t\tlet i, c1, c2, strPosition = position + headerSize\n\t\t\t\t\tfor (i = 0; i < strLength; i++) {\n\t\t\t\t\t\tc1 = value.charCodeAt(i)\n\t\t\t\t\t\tif (c1 < 0x80) {\n\t\t\t\t\t\t\ttarget[strPosition++] = c1\n\t\t\t\t\t\t} else if (c1 < 0x800) {\n\t\t\t\t\t\t\ttarget[strPosition++] = c1 >> 6 | 0xc0\n\t\t\t\t\t\t\ttarget[strPosition++] = c1 & 0x3f | 0x80\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t(c1 & 0xfc00) === 0xd800 &&\n\t\t\t\t\t\t\t((c2 = value.charCodeAt(i + 1)) & 0xfc00) === 0xdc00\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tc1 = 0x10000 + ((c1 & 0x03ff) << 10) + (c2 & 0x03ff)\n\t\t\t\t\t\t\ti++\n\t\t\t\t\t\t\ttarget[strPosition++] = c1 >> 18 | 0xf0\n\t\t\t\t\t\t\ttarget[strPosition++] = c1 >> 12 & 0x3f | 0x80\n\t\t\t\t\t\t\ttarget[strPosition++] = c1 >> 6 & 0x3f | 0x80\n\t\t\t\t\t\t\ttarget[strPosition++] = c1 & 0x3f | 0x80\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttarget[strPosition++] = c1 >> 12 | 0xe0\n\t\t\t\t\t\t\ttarget[strPosition++] = c1 >> 6 & 0x3f | 0x80\n\t\t\t\t\t\t\ttarget[strPosition++] = c1 & 0x3f | 0x80\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlength = strPosition - position - headerSize\n\t\t\t\t} else {\n\t\t\t\t\tlength = encodeUtf8(value, position + headerSize, maxBytes)\n\t\t\t\t}\n\n\t\t\t\tif (length < 0x18) {\n\t\t\t\t\ttarget[position++] = 0x60 | length\n\t\t\t\t} else if (length < 0x100) {\n\t\t\t\t\tif (headerSize < 2) {\n\t\t\t\t\t\ttarget.copyWithin(position + 2, position + 1, position + 1 + length)\n\t\t\t\t\t}\n\t\t\t\t\ttarget[position++] = 0x78\n\t\t\t\t\ttarget[position++] = length\n\t\t\t\t} else if (length < 0x10000) {\n\t\t\t\t\tif (headerSize < 3) {\n\t\t\t\t\t\ttarget.copyWithin(position + 3, position + 2, position + 2 + length)\n\t\t\t\t\t}\n\t\t\t\t\ttarget[position++] = 0x79\n\t\t\t\t\ttarget[position++] = length >> 8\n\t\t\t\t\ttarget[position++] = length & 0xff\n\t\t\t\t} else {\n\t\t\t\t\tif (headerSize < 5) {\n\t\t\t\t\t\ttarget.copyWithin(position + 5, position + 3, position + 3 + length)\n\t\t\t\t\t}\n\t\t\t\t\ttarget[position++] = 0x7a\n\t\t\t\t\ttargetView.setUint32(position, length)\n\t\t\t\t\tposition += 4\n\t\t\t\t}\n\t\t\t\tposition += length\n\t\t\t} else if (type === 'number') {\n\t\t\t\tif (!this.alwaysUseFloat && value >>> 0 === value) {// positive integer, 32-bit or less\n\t\t\t\t\t// positive uint\n\t\t\t\t\tif (value < 0x18) {\n\t\t\t\t\t\ttarget[position++] = value\n\t\t\t\t\t} else if (value < 0x100) {\n\t\t\t\t\t\ttarget[position++] = 0x18\n\t\t\t\t\t\ttarget[position++] = value\n\t\t\t\t\t} else if (value < 0x10000) {\n\t\t\t\t\t\ttarget[position++] = 0x19\n\t\t\t\t\t\ttarget[position++] = value >> 8\n\t\t\t\t\t\ttarget[position++] = value & 0xff\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttarget[position++] = 0x1a\n\t\t\t\t\t\ttargetView.setUint32(position, value)\n\t\t\t\t\t\tposition += 4\n\t\t\t\t\t}\n\t\t\t\t} else if (!this.alwaysUseFloat && value >> 0 === value) { // negative integer\n\t\t\t\t\tif (value >= -0x18) {\n\t\t\t\t\t\ttarget[position++] = 0x1f - value\n\t\t\t\t\t} else if (value >= -0x100) {\n\t\t\t\t\t\ttarget[position++] = 0x38\n\t\t\t\t\t\ttarget[position++] = ~value\n\t\t\t\t\t} else if (value >= -0x10000) {\n\t\t\t\t\t\ttarget[position++] = 0x39\n\t\t\t\t\t\ttargetView.setUint16(position, ~value)\n\t\t\t\t\t\tposition += 2\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttarget[position++] = 0x3a\n\t\t\t\t\t\ttargetView.setUint32(position, ~value)\n\t\t\t\t\t\tposition += 4\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlet useFloat32\n\t\t\t\t\tif ((useFloat32 = this.useFloat32) > 0 && value < 0x100000000 && value >= -0x80000000) {\n\t\t\t\t\t\ttarget[position++] = 0xfa\n\t\t\t\t\t\ttargetView.setFloat32(position, value)\n\t\t\t\t\t\tlet xShifted\n\t\t\t\t\t\tif (useFloat32 < 4 ||\n\t\t\t\t\t\t\t\t// this checks for rounding of numbers that were encoded in 32-bit float to nearest significant decimal digit that could be preserved\n\t\t\t\t\t\t\t\t((xShifted = value * mult10[((target[position] & 0x7f) << 1) | (target[position + 1] >> 7)]) >> 0) === xShifted) {\n\t\t\t\t\t\t\tposition += 4\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t} else\n\t\t\t\t\t\t\tposition-- // move back into position for writing a double\n\t\t\t\t\t}\n\t\t\t\t\ttarget[position++] = 0xfb\n\t\t\t\t\ttargetView.setFloat64(position, value)\n\t\t\t\t\tposition += 8\n\t\t\t\t}\n\t\t\t} else if (type === 'object') {\n\t\t\t\tif (!value)\n\t\t\t\t\ttarget[position++] = 0xf6\n\t\t\t\telse {\n\t\t\t\t\tif (referenceMap) {\n\t\t\t\t\t\tlet referee = referenceMap.get(value)\n\t\t\t\t\t\tif (referee) {\n\t\t\t\t\t\t\ttarget[position++] = 0xd8\n\t\t\t\t\t\t\ttarget[position++] = 29 // http://cbor.schmorp.de/value-sharing\n\t\t\t\t\t\t\ttarget[position++] = 0x19 // 16-bit uint\n\t\t\t\t\t\t\tif (!referee.references) {\n\t\t\t\t\t\t\t\tlet idsToInsert = referenceMap.idsToInsert || (referenceMap.idsToInsert = [])\n\t\t\t\t\t\t\t\treferee.references = []\n\t\t\t\t\t\t\t\tidsToInsert.push(referee)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treferee.references.push(position - start)\n\t\t\t\t\t\t\tposition += 2 // TODO: also support 32-bit\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t} else \n\t\t\t\t\t\t\treferenceMap.set(value, { offset: position - start })\n\t\t\t\t\t}\n\t\t\t\t\tlet constructor = value.constructor\n\t\t\t\t\tif (constructor === Object) {\n\t\t\t\t\t\twriteObject(value)\n\t\t\t\t\t} else if (constructor === Array) {\n\t\t\t\t\t\tlength = value.length\n\t\t\t\t\t\tif (length < 0x18) {\n\t\t\t\t\t\t\ttarget[position++] = 0x80 | length\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\twriteArrayHeader(length)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\t\t\tencode(value[i])\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (constructor === Map) {\n\t\t\t\t\t\tif (this.mapsAsObjects ? this.useTag259ForMaps !== false : this.useTag259ForMaps) {\n\t\t\t\t\t\t\t// use Tag 259 (https://github.com/shanewholloway/js-cbor-codec/blob/master/docs/CBOR-259-spec--explicit-maps.md) for maps if the user wants it that way\n\t\t\t\t\t\t\ttarget[position++] = 0xd9\n\t\t\t\t\t\t\ttarget[position++] = 1\n\t\t\t\t\t\t\ttarget[position++] = 3\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlength = value.size\n\t\t\t\t\t\tif (length < 0x18) {\n\t\t\t\t\t\t\ttarget[position++] = 0xa0 | length\n\t\t\t\t\t\t} else if (length < 0x100) {\n\t\t\t\t\t\t\ttarget[position++] = 0xb8\n\t\t\t\t\t\t\ttarget[position++] = length\n\t\t\t\t\t\t} else if (length < 0x10000) {\n\t\t\t\t\t\t\ttarget[position++] = 0xb9\n\t\t\t\t\t\t\ttarget[position++] = length >> 8\n\t\t\t\t\t\t\ttarget[position++] = length & 0xff\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttarget[position++] = 0xba\n\t\t\t\t\t\t\ttargetView.setUint32(position, length)\n\t\t\t\t\t\t\tposition += 4\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (encoder.keyMap) { \n\t\t\t\t\t\t\tfor (let [ key, entryValue ] of value) {\n\t\t\t\t\t\t\t\tencode(encoder.encodeKey(key))\n\t\t\t\t\t\t\t\tencode(entryValue)\n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t} else { \n\t\t\t\t\t\t\tfor (let [ key, entryValue ] of value) {\n\t\t\t\t\t\t\t\tencode(key) \n\t\t\t\t\t\t\t\tencode(entryValue)\n\t\t\t\t\t\t\t} \t\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (let i = 0, l = extensions.length; i < l; i++) {\n\t\t\t\t\t\t\tlet extensionClass = extensionClasses[i]\n\t\t\t\t\t\t\tif (value instanceof extensionClass) {\n\t\t\t\t\t\t\t\tlet extension = extensions[i]\n\t\t\t\t\t\t\t\tlet tag = extension.tag\n\t\t\t\t\t\t\t\tif (tag == undefined)\n\t\t\t\t\t\t\t\t\ttag = extension.getTag && extension.getTag.call(this, value)\n\t\t\t\t\t\t\t\tif (tag < 0x18) {\n\t\t\t\t\t\t\t\t\ttarget[position++] = 0xc0 | tag\n\t\t\t\t\t\t\t\t} else if (tag < 0x100) {\n\t\t\t\t\t\t\t\t\ttarget[position++] = 0xd8\n\t\t\t\t\t\t\t\t\ttarget[position++] = tag\n\t\t\t\t\t\t\t\t} else if (tag < 0x10000) {\n\t\t\t\t\t\t\t\t\ttarget[position++] = 0xd9\n\t\t\t\t\t\t\t\t\ttarget[position++] = tag >> 8\n\t\t\t\t\t\t\t\t\ttarget[position++] = tag & 0xff\n\t\t\t\t\t\t\t\t} else if (tag > -1) {\n\t\t\t\t\t\t\t\t\ttarget[position++] = 0xda\n\t\t\t\t\t\t\t\t\ttargetView.setUint32(position, tag)\n\t\t\t\t\t\t\t\t\tposition += 4\n\t\t\t\t\t\t\t\t} // else undefined, don't write tag\n\t\t\t\t\t\t\t\textension.encode.call(this, value, encode, makeRoom)\n\t\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (value[Symbol.iterator]) {\n\t\t\t\t\t\t\tif (throwOnIterable) {\n\t\t\t\t\t\t\t\tlet error = new Error('Iterable should be serialized as iterator')\n\t\t\t\t\t\t\t\terror.iteratorNotHandled = true;\n\t\t\t\t\t\t\t\tthrow error;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttarget[position++] = 0x9f // indefinite length array\n\t\t\t\t\t\t\tfor (let entry of value) {\n\t\t\t\t\t\t\t\tencode(entry)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttarget[position++] = 0xff // stop-code\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (value[Symbol.asyncIterator] || isBlob(value)) {\n\t\t\t\t\t\t\tlet error = new Error('Iterable/blob should be serialized as iterator')\n\t\t\t\t\t\t\terror.iteratorNotHandled = true;\n\t\t\t\t\t\t\tthrow error;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.useToJSON && value.toJSON) {\n\t\t\t\t\t\t\tconst json = value.toJSON()\n\t\t\t\t\t\t\t// if for some reason value.toJSON returns itself it'll loop forever\n\t\t\t\t\t\t\tif (json !== value)\n\t\t\t\t\t\t\t\treturn encode(json)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// no extension found, write as a plain object\n\t\t\t\t\t\twriteObject(value)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (type === 'boolean') {\n\t\t\t\ttarget[position++] = value ? 0xf5 : 0xf4\n\t\t\t} else if (type === 'bigint') {\n\t\t\t\tif (value < (BigInt(1)<<BigInt(64)) && value >= 0) {\n\t\t\t\t\t// use an unsigned int as long as it fits\n\t\t\t\t\ttarget[position++] = 0x1b\n\t\t\t\t\ttargetView.setBigUint64(position, value)\n\t\t\t\t} else if (value > -(BigInt(1)<<BigInt(64)) && value < 0) {\n\t\t\t\t\t// if we can fit an unsigned int, use that\n\t\t\t\t\ttarget[position++] = 0x3b\n\t\t\t\t\ttargetView.setBigUint64(position, -value - BigInt(1))\n\t\t\t\t} else {\n\t\t\t\t\t// overflow\n\t\t\t\t\tif (this.largeBigIntToFloat) {\n\t\t\t\t\t\ttarget[position++] = 0xfb\n\t\t\t\t\t\ttargetView.setFloat64(position, Number(value))\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (value >= BigInt(0))\n\t\t\t\t\t\t\ttarget[position++] = 0xc2 // tag 2\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\ttarget[position++] = 0xc3 // tag 2\n\t\t\t\t\t\t\tvalue = BigInt(-1) - value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet bytes = [];\n\t\t\t\t\t\twhile (value) {\n\t\t\t\t\t\t\tbytes.push(Number(value & BigInt(0xff)));\n\t\t\t\t\t\t\tvalue >>= BigInt(8);\n\t\t\t\t\t\t}\n\t\t\t\t\t\twriteBuffer(new Uint8Array(bytes.reverse()), makeRoom);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tposition += 8\n\t\t\t} else if (type === 'undefined') {\n\t\t\t\ttarget[position++] = 0xf7\n\t\t\t} else {\n\t\t\t\tthrow new Error('Unknown type: ' + type)\n\t\t\t}\n\t\t}\n\n\t\tconst writeObject = this.useRecords === false ? this.variableMapSize ? (object) => {\n\t\t\t// this method is slightly slower, but generates \"preferred serialization\" (optimally small for smaller objects)\n\t\t\tlet keys = Object.keys(object)\n\t\t\tlet vals = Object.values(object)\n\t\t\tlet length = keys.length\n\t\t\tif (length < 0x18) {\n\t\t\t\ttarget[position++] = 0xa0 | length\n\t\t\t} else if (length < 0x100) {\n\t\t\t\ttarget[position++] = 0xb8\n\t\t\t\ttarget[position++] = length\n\t\t\t} else if (length < 0x10000) {\n\t\t\t\ttarget[position++] = 0xb9\n\t\t\t\ttarget[position++] = length >> 8\n\t\t\t\ttarget[position++] = length & 0xff\n\t\t\t} else {\n\t\t\t\ttarget[position++] = 0xba\n\t\t\t\ttargetView.setUint32(position, length)\n\t\t\t\tposition += 4\n\t\t\t}\n\t\t\tlet key\n\t\t\tif (encoder.keyMap) { \n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tencode(encoder.encodeKey(keys[i]))\n\t\t\t\t\tencode(vals[i])\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tencode(keys[i])\n\t\t\t\t\tencode(vals[i])\n\t\t\t\t}\n\t\t\t}\n\t\t} :\n\t\t(object) => {\n\t\t\ttarget[position++] = 0xb9 // always use map 16, so we can preallocate and set the length afterwards\n\t\t\tlet objectOffset = position - start\n\t\t\tposition += 2\n\t\t\tlet size = 0\n\t\t\tif (encoder.keyMap) {\n\t\t\t\tfor (let key in object) if (typeof object.hasOwnProperty !== 'function' || object.hasOwnProperty(key)) {\n\t\t\t\t\tencode(encoder.encodeKey(key))\n\t\t\t\t\tencode(object[key])\n\t\t\t\t\tsize++\n\t\t\t\t}\n\t\t\t} else { \n\t\t\t\tfor (let key in object) if (typeof object.hasOwnProperty !== 'function' || object.hasOwnProperty(key)) {\n\t\t\t\t\t\tencode(key)\n\t\t\t\t\t\tencode(object[key])\n\t\t\t\t\tsize++\n\t\t\t\t}\n\t\t\t}\n\t\t\ttarget[objectOffset++ + start] = size >> 8\n\t\t\ttarget[objectOffset + start] = size & 0xff\n\t\t} :\n\t\t(object, skipValues) => {\n\t\t\tlet nextTransition, transition = structures.transitions || (structures.transitions = Object.create(null))\n\t\t\tlet newTransitions = 0\n\t\t\tlet length = 0\n\t\t\tlet parentRecordId\n\t\t\tlet keys\n\t\t\tif (this.keyMap) {\n\t\t\t\tkeys = Object.keys(object).map(k => this.encodeKey(k))\n\t\t\t\tlength = keys.length\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tlet key = keys[i]\n\t\t\t\t\tnextTransition = transition[key]\n\t\t\t\t\tif (!nextTransition) {\n\t\t\t\t\t\tnextTransition = transition[key] = Object.create(null)\n\t\t\t\t\t\tnewTransitions++\n\t\t\t\t\t}\n\t\t\t\t\ttransition = nextTransition\n\t\t\t\t}\t\t\t\t\n\t\t\t} else {\n\t\t\t\tfor (let key in object) if (typeof object.hasOwnProperty !== 'function' || object.hasOwnProperty(key)) {\n\t\t\t\t\tnextTransition = transition[key]\n\t\t\t\t\tif (!nextTransition) {\n\t\t\t\t\t\tif (transition[RECORD_SYMBOL] & 0x100000) {// this indicates it is a brancheable/extendable terminal node, so we will use this record id and extend it\n\t\t\t\t\t\t\tparentRecordId = transition[RECORD_SYMBOL] & 0xffff\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnextTransition = transition[key] = Object.create(null)\n\t\t\t\t\t\tnewTransitions++\n\t\t\t\t\t}\n\t\t\t\t\ttransition = nextTransition\n\t\t\t\t\tlength++\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet recordId = transition[RECORD_SYMBOL]\n\t\t\tif (recordId !== undefined) {\n\t\t\t\trecordId &= 0xffff\n\t\t\t\ttarget[position++] = 0xd9\n\t\t\t\ttarget[position++] = (recordId >> 8) | 0xe0\n\t\t\t\ttarget[position++] = recordId & 0xff\n\t\t\t} else {\n\t\t\t\tif (!keys)\n\t\t\t\t\tkeys = transition.__keys__ || (transition.__keys__ = Object.keys(object))\n\t\t\t\tif (parentRecordId === undefined) {\n\t\t\t\t\trecordId = structures.nextId++\n\t\t\t\t\tif (!recordId) {\n\t\t\t\t\t\trecordId = 0\n\t\t\t\t\t\tstructures.nextId = 1\n\t\t\t\t\t}\n\t\t\t\t\tif (recordId >= MAX_STRUCTURES) {// cycle back around\n\t\t\t\t\t\tstructures.nextId = (recordId = maxSharedStructures) + 1\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\trecordId = parentRecordId\n\t\t\t\t}\n\t\t\t\tstructures[recordId] = keys\n\t\t\t\tif (recordId < maxSharedStructures) {\n\t\t\t\t\ttarget[position++] = 0xd9\n\t\t\t\t\ttarget[position++] = (recordId >> 8) | 0xe0\n\t\t\t\t\ttarget[position++] = recordId & 0xff\n\t\t\t\t\ttransition = structures.transitions\n\t\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\t\tif (transition[RECORD_SYMBOL] === undefined || (transition[RECORD_SYMBOL] & 0x100000))\n\t\t\t\t\t\t\ttransition[RECORD_SYMBOL] = recordId\n\t\t\t\t\t\ttransition = transition[keys[i]]\n\t\t\t\t\t}\n\t\t\t\t\ttransition[RECORD_SYMBOL] = recordId | 0x100000 // indicates it is a extendable terminal\n\t\t\t\t\thasSharedUpdate = true\n\t\t\t\t} else {\n\t\t\t\t\ttransition[RECORD_SYMBOL] = recordId\n\t\t\t\t\ttargetView.setUint32(position, 0xd9dfff00) // tag two byte, then record definition id\n\t\t\t\t\tposition += 3\n\t\t\t\t\tif (newTransitions)\n\t\t\t\t\t\ttransitionsCount += serializationsSinceTransitionRebuild * newTransitions\n\t\t\t\t\t// record the removal of the id, we can maintain our shared structure\n\t\t\t\t\tif (recordIdsToRemove.length >= MAX_STRUCTURES - maxSharedStructures)\n\t\t\t\t\t\trecordIdsToRemove.shift()[RECORD_SYMBOL] = undefined // we are cycling back through, and have to remove old ones\n\t\t\t\t\trecordIdsToRemove.push(transition)\n\t\t\t\t\twriteArrayHeader(length + 2)\n\t\t\t\t\tencode(0xe000 + recordId)\n\t\t\t\t\tencode(keys)\n\t\t\t\t\tif (skipValues) return; // special exit for iterator\n\t\t\t\t\tfor (let key in object)\n\t\t\t\t\t\tif (typeof object.hasOwnProperty !== 'function' || object.hasOwnProperty(key))\n\t\t\t\t\t\t\tencode(object[key])\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (length < 0x18) { // write the array header\n\t\t\t\ttarget[position++] = 0x80 | length\n\t\t\t} else {\n\t\t\t\twriteArrayHeader(length)\n\t\t\t}\n\t\t\tif (skipValues) return; // special exit for iterator\n\t\t\tfor (let key in object)\n\t\t\t\tif (typeof object.hasOwnProperty !== 'function' || object.hasOwnProperty(key))\n\t\t\t\t\tencode(object[key])\n\t\t}\n\t\tconst makeRoom = (end) => {\n\t\t\tlet newSize\n\t\t\tif (end > 0x1000000) {\n\t\t\t\t// special handling for really large buffers\n\t\t\t\tif ((end - start) > MAX_BUFFER_SIZE)\n\t\t\t\t\tthrow new Error('Encoded buffer would be larger than maximum buffer size')\n\t\t\t\tnewSize = Math.min(MAX_BUFFER_SIZE,\n\t\t\t\t\tMath.round(Math.max((end - start) * (end > 0x4000000 ? 1.25 : 2), 0x400000) / 0x1000) * 0x1000)\n\t\t\t} else // faster handling for smaller buffers\n\t\t\t\tnewSize = ((Math.max((end - start) << 2, target.length - 1) >> 12) + 1) << 12\n\t\t\tlet newBuffer = new ByteArrayAllocate(newSize)\n\t\t\ttargetView = new DataView(newBuffer.buffer, 0, newSize)\n\t\t\tif (target.copy)\n\t\t\t\ttarget.copy(newBuffer, 0, start, end)\n\t\t\telse\n\t\t\t\tnewBuffer.set(target.slice(start, end))\n\t\t\tposition -= start\n\t\t\tstart = 0\n\t\t\tsafeEnd = newBuffer.length - 10\n\t\t\treturn target = newBuffer\n\t\t}\n\t\tlet chunkThreshold = 100;\n\t\tlet continuedChunkThreshold = 1000;\n\t\tthis.encodeAsIterable = function(value, options) {\n\t\t\treturn startEncoding(value, options, encodeObjectAsIterable);\n\t\t}\n\t\tthis.encodeAsAsyncIterable = function(value, options) {\n\t\t\treturn startEncoding(value, options, encodeObjectAsAsyncIterable);\n\t\t}\n\n\t\tfunction* encodeObjectAsIterable(object, iterateProperties, finalIterable) {\n\t\t\tlet constructor = object.constructor;\n\t\t\tif (constructor === Object) {\n\t\t\t\tlet useRecords = encoder.useRecords !== false;\n\t\t\t\tif (useRecords)\n\t\t\t\t\twriteObject(object, true); // write the record identifier\n\t\t\t\telse\n\t\t\t\t\twriteEntityLength(Object.keys(object).length, 0xa0);\n\t\t\t\tfor (let key in object) {\n\t\t\t\t\tlet value = object[key];\n\t\t\t\t\tif (!useRecords) encode(key);\n\t\t\t\t\tif (value && typeof value === 'object') {\n\t\t\t\t\t\tif (iterateProperties[key])\n\t\t\t\t\t\t\tyield* encodeObjectAsIterable(value, iterateProperties[key]);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tyield* tryEncode(value, iterateProperties, key);\n\t\t\t\t\t} else encode(value);\n\t\t\t\t}\n\t\t\t} else if (constructor === Array) {\n\t\t\t\tlet length = object.length;\n\t\t\t\twriteArrayHeader(length);\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tlet value = object[i];\n\t\t\t\t\tif (value && (typeof value === 'object' || position - start > chunkThreshold)) {\n\t\t\t\t\t\tif (iterateProperties.element)\n\t\t\t\t\t\t\tyield* encodeObjectAsIterable(value, iterateProperties.element);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tyield* tryEncode(value, iterateProperties, 'element');\n\t\t\t\t\t} else encode(value);\n\t\t\t\t}\n\t\t\t} else if (object[Symbol.iterator] && !object.buffer) { // iterator, but exclude typed arrays\n\t\t\t\ttarget[position++] = 0x9f; // start indefinite array\n\t\t\t\tfor (let value of object) {\n\t\t\t\t\tif (value && (typeof value === 'object' || position - start > chunkThreshold)) {\n\t\t\t\t\t\tif (iterateProperties.element)\n\t\t\t\t\t\t\tyield* encodeObjectAsIterable(value, iterateProperties.element);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tyield* tryEncode(value, iterateProperties, 'element');\n\t\t\t\t\t} else encode(value);\n\t\t\t\t}\n\t\t\t\ttarget[position++] = 0xff; // stop byte\n\t\t\t} else if (isBlob(object)){\n\t\t\t\twriteEntityLength(object.size, 0x40); // encode as binary data\n\t\t\t\tyield target.subarray(start, position);\n\t\t\t\tyield object; // directly return blobs, they have to be encoded asynchronously\n\t\t\t\trestartEncoding();\n\t\t\t} else if (object[Symbol.asyncIterator]) {\n\t\t\t\ttarget[position++] = 0x9f; // start indefinite array\n\t\t\t\tyield target.subarray(start, position);\n\t\t\t\tyield object; // directly return async iterators, they have to be encoded asynchronously\n\t\t\t\trestartEncoding();\n\t\t\t\ttarget[position++] = 0xff; // stop byte\n\t\t\t} else {\n\t\t\t\tencode(object);\n\t\t\t}\n\t\t\tif (finalIterable && position > start) yield target.subarray(start, position);\n\t\t\telse if (position - start > chunkThreshold) {\n\t\t\t\tyield target.subarray(start, position);\n\t\t\t\trestartEncoding();\n\t\t\t}\n\t\t}\n\t\tfunction* tryEncode(value, iterateProperties, key) {\n\t\t\tlet restart = position - start;\n\t\t\ttry {\n\t\t\t\tencode(value);\n\t\t\t\tif (position - start > chunkThreshold) {\n\t\t\t\t\tyield target.subarray(start, position);\n\t\t\t\t\trestartEncoding();\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (error.iteratorNotHandled) {\n\t\t\t\t\titerateProperties[key] = {};\n\t\t\t\t\tposition = start + restart; // restart our position so we don't have partial data from last encode\n\t\t\t\t\tyield* encodeObjectAsIterable.call(this, value, iterateProperties[key]);\n\t\t\t\t} else throw error;\n\t\t\t}\n\t\t}\n\t\tfunction restartEncoding() {\n\t\t\tchunkThreshold = continuedChunkThreshold;\n\t\t\tencoder.encode(null, THROW_ON_ITERABLE); // restart encoding\n\t\t}\n\t\tfunction startEncoding(value, options, encodeIterable) {\n\t\t\tif (options && options.chunkThreshold) // explicitly specified chunk sizes\n\t\t\t\tchunkThreshold = continuedChunkThreshold = options.chunkThreshold;\n\t\t\telse // we start with a smaller threshold to get initial bytes sent quickly\n\t\t\t\tchunkThreshold = 100;\n\t\t\tif (value && typeof value === 'object') {\n\t\t\t\tencoder.encode(null, THROW_ON_ITERABLE); // start encoding\n\t\t\t\treturn encodeIterable(value, encoder.iterateProperties || (encoder.iterateProperties = {}), true);\n\t\t\t}\n\t\t\treturn [encoder.encode(value)];\n\t\t}\n\n\t\tasync function* encodeObjectAsAsyncIterable(value, iterateProperties) {\n\t\t\tfor (let encodedValue of encodeObjectAsIterable(value, iterateProperties, true)) {\n\t\t\t\tlet constructor = encodedValue.constructor;\n\t\t\t\tif (constructor === ByteArray || constructor === Uint8Array)\n\t\t\t\t\tyield encodedValue;\n\t\t\t\telse if (isBlob(encodedValue)) {\n\t\t\t\t\tlet reader = encodedValue.stream().getReader();\n\t\t\t\t\tlet next;\n\t\t\t\t\twhile (!(next = await reader.read()).done) {\n\t\t\t\t\t\tyield next.value;\n\t\t\t\t\t}\n\t\t\t\t} else if (encodedValue[Symbol.asyncIterator]) {\n\t\t\t\t\tfor await (let asyncValue of encodedValue) {\n\t\t\t\t\t\trestartEncoding();\n\t\t\t\t\t\tif (asyncValue)\n\t\t\t\t\t\t\tyield* encodeObjectAsAsyncIterable(asyncValue, iterateProperties.async || (iterateProperties.async = {}));\n\t\t\t\t\t\telse yield encoder.encode(asyncValue);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tyield encodedValue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tuseBuffer(buffer) {\n\t\t// this means we are finished using our own buffer and we can write over it safely\n\t\ttarget = buffer\n\t\ttargetView = new DataView(target.buffer, target.byteOffset, target.byteLength)\n\t\tposition = 0\n\t}\n\tclearSharedData() {\n\t\tif (this.structures)\n\t\t\tthis.structures = []\n\t\tif (this.sharedValues)\n\t\t\tthis.sharedValues = undefined\n\t}\n\tupdateSharedData() {\n\t\tlet lastVersion = this.sharedVersion || 0\n\t\tthis.sharedVersion = lastVersion + 1\n\t\tlet structuresCopy = this.structures.slice(0)\n\t\tlet sharedData = new SharedData(structuresCopy, this.sharedValues, this.sharedVersion)\n\t\tlet saveResults = this.saveShared(sharedData,\n\t\t\t\texistingShared => (existingShared && existingShared.version || 0) == lastVersion)\n\t\tif (saveResults === false) {\n\t\t\t// get updated structures and try again if the update failed\n\t\t\tsharedData = this.getShared() || {}\n\t\t\tthis.structures = sharedData.structures || []\n\t\t\tthis.sharedValues = sharedData.packedValues\n\t\t\tthis.sharedVersion = sharedData.version\n\t\t\tthis.structures.nextId = this.structures.length\n\t\t} else {\n\t\t\t// restore structures\n\t\t\tstructuresCopy.forEach((structure, i) => this.structures[i] = structure)\n\t\t}\n\t\t// saveShared may fail to write and reload, or may have reloaded to check compatibility and overwrite saved data, either way load the correct shared data\n\t\treturn saveResults\n\t}\n}\nfunction writeEntityLength(length, majorValue) {\n\tif (length < 0x18)\n\t\ttarget[position++] = majorValue | length\n\telse if (length < 0x100) {\n\t\ttarget[position++] = majorValue | 0x18\n\t\ttarget[position++] = length\n\t} else if (length < 0x10000) {\n\t\ttarget[position++] = majorValue | 0x19\n\t\ttarget[position++] = length >> 8\n\t\ttarget[position++] = length & 0xff\n\t} else {\n\t\ttarget[position++] = majorValue | 0x1a\n\t\ttargetView.setUint32(position, length)\n\t\tposition += 4\n\t}\n\n}\nclass SharedData {\n\tconstructor(structures, values, version) {\n\t\tthis.structures = structures\n\t\tthis.packedValues = values\n\t\tthis.version = version\n\t}\n}\n\nfunction writeArrayHeader(length) {\n\tif (length < 0x18)\n\t\ttarget[position++] = 0x80 | length\n\telse if (length < 0x100) {\n\t\ttarget[position++] = 0x98\n\t\ttarget[position++] = length\n\t} else if (length < 0x10000) {\n\t\ttarget[position++] = 0x99\n\t\ttarget[position++] = length >> 8\n\t\ttarget[position++] = length & 0xff\n\t} else {\n\t\ttarget[position++] = 0x9a\n\t\ttargetView.setUint32(position, length)\n\t\tposition += 4\n\t}\n}\n\nconst BlobConstructor = typeof Blob === 'undefined' ? function(){} : Blob;\nfunction isBlob(object) {\n\tif (object instanceof BlobConstructor)\n\t\treturn true;\n\tlet tag = object[Symbol.toStringTag];\n\treturn tag === 'Blob' || tag === 'File';\n}\nfunction findRepetitiveStrings(value, packedValues) {\n\tswitch(typeof value) {\n\t\tcase 'string':\n\t\t\tif (value.length > 3) {\n\t\t\t\tif (packedValues.objectMap[value] > -1 || packedValues.values.length >= packedValues.maxValues)\n\t\t\t\t\treturn\n\t\t\t\tlet packedStatus = packedValues.get(value)\n\t\t\t\tif (packedStatus) {\n\t\t\t\t\tif (++packedStatus.count == 2) {\n\t\t\t\t\t\tpackedValues.values.push(value)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tpackedValues.set(value, {\n\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t})\n\t\t\t\t\tif (packedValues.samplingPackedValues) {\n\t\t\t\t\t\tlet status = packedValues.samplingPackedValues.get(value)\n\t\t\t\t\t\tif (status)\n\t\t\t\t\t\t\tstatus.count++\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tpackedValues.samplingPackedValues.set(value, {\n\t\t\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak\n\t\tcase 'object':\n\t\t\tif (value) {\n\t\t\t\tif (value instanceof Array) {\n\t\t\t\t\tfor (let i = 0, l = value.length; i < l; i++) {\n\t\t\t\t\t\tfindRepetitiveStrings(value[i], packedValues)\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tlet includeKeys = !packedValues.encoder.useRecords\n\t\t\t\t\tfor (var key in value) {\n\t\t\t\t\t\tif (value.hasOwnProperty(key)) {\n\t\t\t\t\t\t\tif (includeKeys)\n\t\t\t\t\t\t\t\tfindRepetitiveStrings(key, packedValues)\n\t\t\t\t\t\t\tfindRepetitiveStrings(value[key], packedValues)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak\n\t\tcase 'function': console.log(value)\n\t}\n}\nconst isLittleEndianMachine = new Uint8Array(new Uint16Array([1]).buffer)[0] == 1\nextensionClasses = [ Date, Set, Error, RegExp, Tag, ArrayBuffer,\n\tUint8Array, Uint8ClampedArray, Uint16Array, Uint32Array,\n\ttypeof BigUint64Array == 'undefined' ? function() {} : BigUint64Array, Int8Array, Int16Array, Int32Array,\n\ttypeof BigInt64Array == 'undefined' ? function() {} : BigInt64Array,\n\tFloat32Array, Float64Array, SharedData ]\n\n//Object.getPrototypeOf(Uint8Array.prototype).constructor /*TypedArray*/\nextensions = [{ // Date\n\ttag: 1,\n\tencode(date, encode) {\n\t\tlet seconds = date.getTime() / 1000\n\t\tif ((this.useTimestamp32 || date.getMilliseconds() === 0) && seconds >= 0 && seconds < 0x100000000) {\n\t\t\t// Timestamp 32\n\t\t\ttarget[position++] = 0x1a\n\t\t\ttargetView.setUint32(position, seconds)\n\t\t\tposition += 4\n\t\t} else {\n\t\t\t// Timestamp float64\n\t\t\ttarget[position++] = 0xfb\n\t\t\ttargetView.setFloat64(position, seconds)\n\t\t\tposition += 8\n\t\t}\n\t}\n}, { // Set\n\ttag: 258, // https://github.com/input-output-hk/cbor-sets-spec/blob/master/CBOR_SETS.md\n\tencode(set, encode) {\n\t\tlet array = Array.from(set)\n\t\tencode(array)\n\t}\n}, { // Error\n\ttag: 27, // http://cbor.schmorp.de/generic-object\n\tencode(error, encode) {\n\t\tencode([ error.name, error.message ])\n\t}\n}, { // RegExp\n\ttag: 27, // http://cbor.schmorp.de/generic-object\n\tencode(regex, encode) {\n\t\tencode([ 'RegExp', regex.source, regex.flags ])\n\t}\n}, { // Tag\n\tgetTag(tag) {\n\t\treturn tag.tag\n\t},\n\tencode(tag, encode) {\n\t\tencode(tag.value)\n\t}\n}, { // ArrayBuffer\n\tencode(arrayBuffer, encode, makeRoom) {\n\t\twriteBuffer(arrayBuffer, makeRoom)\n\t}\n}, { // Uint8Array\n\tgetTag(typedArray) {\n\t\tif (typedArray.constructor === Uint8Array) {\n\t\t\tif (this.tagUint8Array || hasNodeBuffer && this.tagUint8Array !== false)\n\t\t\t\treturn 64;\n\t\t} // else no tag\n\t},\n\tencode(typedArray, encode, makeRoom) {\n\t\twriteBuffer(typedArray, makeRoom)\n\t}\n},\n\ttypedArrayEncoder(68, 1),\n\ttypedArrayEncoder(69, 2),\n\ttypedArrayEncoder(70, 4),\n\ttypedArrayEncoder(71, 8),\n\ttypedArrayEncoder(72, 1),\n\ttypedArrayEncoder(77, 2),\n\ttypedArrayEncoder(78, 4),\n\ttypedArrayEncoder(79, 8),\n\ttypedArrayEncoder(85, 4),\n\ttypedArrayEncoder(86, 8),\n{\n\tencode(sharedData, encode) { // write SharedData\n\t\tlet packedValues = sharedData.packedValues || []\n\t\tlet sharedStructures = sharedData.structures || []\n\t\tif (packedValues.values.length > 0) {\n\t\t\ttarget[position++] = 0xd8 // one-byte tag\n\t\t\ttarget[position++] = 51 // tag 51 for packed shared structures https://www.potaroo.net/ietf/ids/draft-ietf-cbor-packed-03.txt\n\t\t\twriteArrayHeader(4)\n\t\t\tlet valuesArray = packedValues.values\n\t\t\tencode(valuesArray)\n\t\t\twriteArrayHeader(0) // prefixes\n\t\t\twriteArrayHeader(0) // suffixes\n\t\t\tpackedObjectMap = Object.create(sharedPackedObjectMap || null)\n\t\t\tfor (let i = 0, l = valuesArray.length; i < l; i++) {\n\t\t\t\tpackedObjectMap[valuesArray[i]] = i\n\t\t\t}\n\t\t}\n\t\tif (sharedStructures) {\n\t\t\ttargetView.setUint32(position, 0xd9dffe00)\n\t\t\tposition += 3\n\t\t\tlet definitions = sharedStructures.slice(0)\n\t\t\tdefinitions.unshift(0xe000)\n\t\t\tdefinitions.push(new Tag(sharedData.version, 0x53687264))\n\t\t\tencode(definitions)\n\t\t} else\n\t\t\tencode(new Tag(sharedData.version, 0x53687264))\n\t\t}\n\t}]\nfunction typedArrayEncoder(tag, size) {\n\tif (!isLittleEndianMachine && size > 1)\n\t\ttag -= 4 // the big endian equivalents are 4 less\n\treturn {\n\t\ttag: tag,\n\t\tencode: function writeExtBuffer(typedArray, encode) {\n\t\t\tlet length = typedArray.byteLength\n\t\t\tlet offset = typedArray.byteOffset || 0\n\t\t\tlet buffer = typedArray.buffer || typedArray\n\t\t\tencode(hasNodeBuffer ? Buffer.from(buffer, offset, length) :\n\t\t\t\tnew Uint8Array(buffer, offset, length))\n\t\t}\n\t}\n}\nfunction writeBuffer(buffer, makeRoom) {\n\tlet length = buffer.byteLength\n\tif (length < 0x18) {\n\t\ttarget[position++] = 0x40 + length\n\t} else if (length < 0x100) {\n\t\ttarget[position++] = 0x58\n\t\ttarget[position++] = length\n\t} else if (length < 0x10000) {\n\t\ttarget[position++] = 0x59\n\t\ttarget[position++] = length >> 8\n\t\ttarget[position++] = length & 0xff\n\t} else {\n\t\ttarget[position++] = 0x5a\n\t\ttargetView.setUint32(position, length)\n\t\tposition += 4\n\t}\n\tif (position + length >= target.length) {\n\t\tmakeRoom(position + length)\n\t}\n\t// if it is already a typed array (has an ArrayBuffer), use that, but if it is an ArrayBuffer itself,\n\t// must wrap it to set it.\n\ttarget.set(buffer.buffer ? buffer : new Uint8Array(buffer), position)\n\tposition += length\n}\n\nfunction insertIds(serialized, idsToInsert) {\n\t// insert the ids that need to be referenced for structured clones\n\tlet nextId\n\tlet distanceToMove = idsToInsert.length * 2\n\tlet lastEnd = serialized.length - distanceToMove\n\tidsToInsert.sort((a, b) => a.offset > b.offset ? 1 : -1)\n\tfor (let id = 0; id < idsToInsert.length; id++) {\n\t\tlet referee = idsToInsert[id]\n\t\treferee.id = id\n\t\tfor (let position of referee.references) {\n\t\t\tserialized[position++] = id >> 8\n\t\t\tserialized[position] = id & 0xff\n\t\t}\n\t}\n\twhile (nextId = idsToInsert.pop()) {\n\t\tlet offset = nextId.offset\n\t\tserialized.copyWithin(offset + distanceToMove, offset, lastEnd)\n\t\tdistanceToMove -= 2\n\t\tlet position = offset + distanceToMove\n\t\tserialized[position++] = 0xd8\n\t\tserialized[position++] = 28 // http://cbor.schmorp.de/value-sharing\n\t\tlastEnd = offset\n\t}\n\treturn serialized\n}\nfunction writeBundles(start, encode) {\n\ttargetView.setUint32(bundledStrings.position + start, position - bundledStrings.position - start + 1) // the offset to bundle\n\tlet writeStrings = bundledStrings\n\tbundledStrings = null\n\tencode(writeStrings[0])\n\tencode(writeStrings[1])\n}\n\nexport function addExtension(extension) {\n\tif (extension.Class) {\n\t\tif (!extension.encode)\n\t\t\tthrow new Error('Extension has no encode function')\n\t\textensionClasses.unshift(extension.Class)\n\t\textensions.unshift(extension)\n\t}\n\tdecodeAddExtension(extension)\n}\nlet defaultEncoder = new Encoder({ useRecords: false })\nexport const encode = defaultEncoder.encode\nexport const encodeAsIterable = defaultEncoder.encodeAsIterable\nexport const encodeAsAsyncIterable = defaultEncoder.encodeAsAsyncIterable\nexport { FLOAT32_OPTIONS } from './decode.js'\nimport { FLOAT32_OPTIONS } from './decode.js'\nexport const { NEVER, ALWAYS, DECIMAL_ROUND, DECIMAL_FIT } = FLOAT32_OPTIONS\nexport const REUSE_BUFFER_MODE = 512\nexport const RESET_BUFFER_MODE = 1024\nexport const THROW_ON_ITERABLE = 2048\n\n\n", "let decoder\ntry {\n\tdecoder = new TextDecoder()\n} catch(error) {}\nlet src\nlet srcEnd\nlet position = 0\nlet alreadySet\nconst EMPTY_ARRAY = []\nconst LEGACY_RECORD_INLINE_ID = 105\nconst RECORD_DEFINITIONS_ID = 0xdffe\nconst RECORD_INLINE_ID = 0xdfff // temporary first-come first-serve tag // proposed tag: 0x7265 // 're'\nconst BUNDLED_STRINGS_ID = 0xdff9\nconst PACKED_TABLE_TAG_ID = 51\nconst PACKED_REFERENCE_TAG_ID = 6\nconst STOP_CODE = {}\nlet maxArraySize = 112810000 // This is the maximum array size in V8. We would potentially detect and set it higher\n// for JSC, but this is pretty large and should be sufficient for most use cases\nlet maxMapSize = 16810000 // JavaScript has a fixed maximum map size of about 16710000, but JS itself enforces this,\n// so we don't need to\n\nlet maxObjectSize = 16710000; // This is the maximum number of keys in a Map. It takes over a minute to create this\n// many keys in an object, so also probably a reasonable choice there.\nlet strings = EMPTY_ARRAY\nlet stringPosition = 0\nlet currentDecoder = {}\nlet currentStructures\nlet srcString\nlet srcStringStart = 0\nlet srcStringEnd = 0\nlet bundledStrings\nlet referenceMap\nlet currentExtensions = []\nlet currentExtensionRanges = []\nlet packedValues\nlet dataView\nlet restoreMapsAsObject\nlet defaultOptions = {\n\tuseRecords: false,\n\tmapsAsObjects: true\n}\nlet sequentialMode = false\nlet inlineObjectReadThreshold = 2;\nvar BlockedFunction // we use search and replace to change the next call to BlockedFunction to avoid CSP issues for\n// no-eval build\ntry {\n\tnew Function('')\n} catch(error) {\n\t// if eval variants are not supported, do not create inline object readers ever\n\tinlineObjectReadThreshold = Infinity\n}\n\n\n\nexport class Decoder {\n\tconstructor(options) {\n\t\tif (options) {\n\t\t\tif ((options.keyMap || options._keyMap) && !options.useRecords) {\n\t\t\t\toptions.useRecords = false\n\t\t\t\toptions.mapsAsObjects = true\n\t\t\t}\n\t\t\tif (options.useRecords === false && options.mapsAsObjects === undefined)\n\t\t\t\toptions.mapsAsObjects = true\n\t\t\tif (options.getStructures)\n\t\t\t\toptions.getShared = options.getStructures\n\t\t\tif (options.getShared && !options.structures)\n\t\t\t\t(options.structures = []).uninitialized = true // this is what we use to denote an uninitialized structures\n\t\t\tif (options.keyMap) {\n\t\t\t\tthis.mapKey = new Map()\n\t\t\t\tfor (let [k,v] of Object.entries(options.keyMap)) this.mapKey.set(v,k)\n\t\t\t}\n\t\t}\n\t\tObject.assign(this, options)\n\t}\n\t/*\n\tdecodeKey(key) {\n\t\treturn this.keyMap\n\t\t\t? Object.keys(this.keyMap)[Object.values(this.keyMap).indexOf(key)] || key\n\t\t\t: key\n\t}\n\t*/\n\tdecodeKey(key) {\n\t\treturn this.keyMap ? this.mapKey.get(key) || key : key\n\t}\n\t\n\tencodeKey(key) {\n\t\treturn this.keyMap && this.keyMap.hasOwnProperty(key) ? this.keyMap[key] : key\n\t}\n\n\tencodeKeys(rec) {\n\t\tif (!this._keyMap) return rec\n\t\tlet map = new Map()\n\t\tfor (let [k,v] of Object.entries(rec)) map.set((this._keyMap.hasOwnProperty(k) ? this._keyMap[k] : k), v)\n\t\treturn map\n\t}\n\n\tdecodeKeys(map) {\n\t\tif (!this._keyMap || map.constructor.name != 'Map') return map\n\t\tif (!this._mapKey) {\n\t\t\tthis._mapKey = new Map()\n\t\t\tfor (let [k,v] of Object.entries(this._keyMap)) this._mapKey.set(v,k)\n\t\t}\n\t\tlet res = {}\n\t\t//map.forEach((v,k) => res[Object.keys(this._keyMap)[Object.values(this._keyMap).indexOf(k)] || k] = v)\n\t\tmap.forEach((v,k) => res[safeKey(this._mapKey.has(k) ? this._mapKey.get(k) : k)] =  v)\n\t\treturn res\n\t}\n\t\n\tmapDecode(source, end) {\n\t\n\t\tlet res = this.decode(source)\n\t\tif (this._keyMap) { \n\t\t\t//Experiemntal support for Optimised KeyMap  decoding \n\t\t\tswitch (res.constructor.name) {\n\t\t\t\tcase 'Array': return res.map(r => this.decodeKeys(r))\n\t\t\t\t//case 'Map': return this.decodeKeys(res)\n\t\t\t}\n\t\t}\n\t\treturn res\n\t}\n\n\tdecode(source, end) {\n\t\tif (src) {\n\t\t\t// re-entrant execution, save the state and restore it after we do this decode\n\t\t\treturn saveState(() => {\n\t\t\t\tclearSource()\n\t\t\t\treturn this ? this.decode(source, end) : Decoder.prototype.decode.call(defaultOptions, source, end)\n\t\t\t})\n\t\t}\n\t\tsrcEnd = end > -1 ? end : source.length\n\t\tposition = 0\n\t\tstringPosition = 0\n\t\tsrcStringEnd = 0\n\t\tsrcString = null\n\t\tstrings = EMPTY_ARRAY\n\t\tbundledStrings = null\n\t\tsrc = source\n\t\t// this provides cached access to the data view for a buffer if it is getting reused, which is a recommend\n\t\t// technique for getting data from a database where it can be copied into an existing buffer instead of creating\n\t\t// new ones\n\t\ttry {\n\t\t\tdataView = source.dataView || (source.dataView = new DataView(source.buffer, source.byteOffset, source.byteLength))\n\t\t} catch(error) {\n\t\t\t// if it doesn't have a buffer, maybe it is the wrong type of object\n\t\t\tsrc = null\n\t\t\tif (source instanceof Uint8Array)\n\t\t\t\tthrow error\n\t\t\tthrow new Error('Source must be a Uint8Array or Buffer but was a ' + ((source && typeof source == 'object') ? source.constructor.name : typeof source))\n\t\t}\n\t\tif (this instanceof Decoder) {\n\t\t\tcurrentDecoder = this\n\t\t\tpackedValues = this.sharedValues &&\n\t\t\t\t(this.pack ? new Array(this.maxPrivatePackedValues || 16).concat(this.sharedValues) :\n\t\t\t\tthis.sharedValues)\n\t\t\tif (this.structures) {\n\t\t\t\tcurrentStructures = this.structures\n\t\t\t\treturn checkedRead()\n\t\t\t} else if (!currentStructures || currentStructures.length > 0) {\n\t\t\t\tcurrentStructures = []\n\t\t\t}\n\t\t} else {\n\t\t\tcurrentDecoder = defaultOptions\n\t\t\tif (!currentStructures || currentStructures.length > 0)\n\t\t\t\tcurrentStructures = []\n\t\t\tpackedValues = null\n\t\t}\n\t\treturn checkedRead()\n\t}\n\tdecodeMultiple(source, forEach) {\n\t\tlet values, lastPosition = 0\n\t\ttry {\n\t\t\tlet size = source.length\n\t\t\tsequentialMode = true\n\t\t\tlet value = this ? this.decode(source, size) : defaultDecoder.decode(source, size)\n\t\t\tif (forEach) {\n\t\t\t\tif (forEach(value) === false) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\twhile(position < size) {\n\t\t\t\t\tlastPosition = position\n\t\t\t\t\tif (forEach(checkedRead()) === false) {\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvalues = [ value ]\n\t\t\t\twhile(position < size) {\n\t\t\t\t\tlastPosition = position\n\t\t\t\t\tvalues.push(checkedRead())\n\t\t\t\t}\n\t\t\t\treturn values\n\t\t\t}\n\t\t} catch(error) {\n\t\t\terror.lastPosition = lastPosition\n\t\t\terror.values = values\n\t\t\tthrow error\n\t\t} finally {\n\t\t\tsequentialMode = false\n\t\t\tclearSource()\n\t\t}\n\t}\n}\nexport function getPosition() {\n\treturn position\n}\nexport function checkedRead() {\n\ttry {\n\t\tlet result = read()\n\t\tif (bundledStrings) {\n\t\t\tif (position >= bundledStrings.postBundlePosition) {\n\t\t\t\tlet error = new Error('Unexpected bundle position');\n\t\t\t\terror.incomplete = true;\n\t\t\t\tthrow error\n\t\t\t}\n\t\t\t// bundled strings to skip past\n\t\t\tposition = bundledStrings.postBundlePosition;\n\t\t\tbundledStrings = null;\n\t\t}\n\n\t\tif (position == srcEnd) {\n\t\t\t// finished reading this source, cleanup references\n\t\t\tcurrentStructures = null\n\t\t\tsrc = null\n\t\t\tif (referenceMap)\n\t\t\t\treferenceMap = null\n\t\t} else if (position > srcEnd) {\n\t\t\t// over read\n\t\t\tlet error = new Error('Unexpected end of CBOR data')\n\t\t\terror.incomplete = true\n\t\t\tthrow error\n\t\t} else if (!sequentialMode) {\n\t\t\tthrow new Error('Data read, but end of buffer not reached')\n\t\t}\n\t\t// else more to read, but we are reading sequentially, so don't clear source yet\n\t\treturn result\n\t} catch(error) {\n\t\tclearSource()\n\t\tif (error instanceof RangeError || error.message.startsWith('Unexpected end of buffer')) {\n\t\t\terror.incomplete = true\n\t\t}\n\t\tthrow error\n\t}\n}\n\nexport function read() {\n\tlet token = src[position++]\n\tlet majorType = token >> 5\n\ttoken = token & 0x1f\n\tif (token > 0x17) {\n\t\tswitch (token) {\n\t\t\tcase 0x18:\n\t\t\t\ttoken = src[position++]\n\t\t\t\tbreak\n\t\t\tcase 0x19:\n\t\t\t\tif (majorType == 7) {\n\t\t\t\t\treturn getFloat16()\n\t\t\t\t}\n\t\t\t\ttoken = dataView.getUint16(position)\n\t\t\t\tposition += 2\n\t\t\t\tbreak\n\t\t\tcase 0x1a:\n\t\t\t\tif (majorType == 7) {\n\t\t\t\t\tlet value = dataView.getFloat32(position)\n\t\t\t\t\tif (currentDecoder.useFloat32 > 2) {\n\t\t\t\t\t\t// this does rounding of numbers that were encoded in 32-bit float to nearest significant decimal digit that could be preserved\n\t\t\t\t\t\tlet multiplier = mult10[((src[position] & 0x7f) << 1) | (src[position + 1] >> 7)]\n\t\t\t\t\t\tposition += 4\n\t\t\t\t\t\treturn ((multiplier * value + (value > 0 ? 0.5 : -0.5)) >> 0) / multiplier\n\t\t\t\t\t}\n\t\t\t\t\tposition += 4\n\t\t\t\t\treturn value\n\t\t\t\t}\n\t\t\t\ttoken = dataView.getUint32(position)\n\t\t\t\tposition += 4\n\t\t\t\tbreak\n\t\t\tcase 0x1b:\n\t\t\t\tif (majorType == 7) {\n\t\t\t\t\tlet value = dataView.getFloat64(position)\n\t\t\t\t\tposition += 8\n\t\t\t\t\treturn value\n\t\t\t\t}\n\t\t\t\tif (majorType > 1) {\n\t\t\t\t\tif (dataView.getUint32(position) > 0)\n\t\t\t\t\t\tthrow new Error('JavaScript does not support arrays, maps, or strings with length over 4294967295')\n\t\t\t\t\ttoken = dataView.getUint32(position + 4)\n\t\t\t\t} else if (currentDecoder.int64AsNumber) {\n\t\t\t\t\ttoken = dataView.getUint32(position) * 0x100000000\n\t\t\t\t\ttoken += dataView.getUint32(position + 4)\n\t\t\t\t} else\n\t\t\t\t\ttoken = dataView.getBigUint64(position)\n\t\t\t\tposition += 8\n\t\t\t\tbreak\n\t\t\tcase 0x1f: \n\t\t\t\t// indefinite length\n\t\t\t\tswitch(majorType) {\n\t\t\t\t\tcase 2: // byte string\n\t\t\t\t\tcase 3: // text string\n\t\t\t\t\t\tthrow new Error('Indefinite length not supported for byte or text strings')\n\t\t\t\t\tcase 4: // array\n\t\t\t\t\t\tlet array = []\n\t\t\t\t\t\tlet value, i = 0\n\t\t\t\t\t\twhile ((value = read()) != STOP_CODE) {\n\t\t\t\t\t\t\tif (i >= maxArraySize) throw new Error(`Array length exceeds ${maxArraySize}`)\n\t\t\t\t\t\t\tarray[i++] = value\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn majorType == 4 ? array : majorType == 3 ? array.join('') : Buffer.concat(array)\n\t\t\t\t\tcase 5: // map\n\t\t\t\t\t\tlet key\n\t\t\t\t\t\tif (currentDecoder.mapsAsObjects) {\n\t\t\t\t\t\t\tlet object = {}\n\t\t\t\t\t\t\tlet i = 0;\n\t\t\t\t\t\t\tif (currentDecoder.keyMap) {\n\t\t\t\t\t\t\t\twhile((key = read()) != STOP_CODE) {\n\t\t\t\t\t\t\t\t\tif (i++ >= maxMapSize) throw new Error(`Property count exceeds ${maxMapSize}`)\n\t\t\t\t\t\t\t\t\tobject[safeKey(currentDecoder.decodeKey(key))] = read()\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\twhile ((key = read()) != STOP_CODE) {\n\t\t\t\t\t\t\t\t\tif (i++ >= maxMapSize) throw new Error(`Property count exceeds ${maxMapSize}`)\n\t\t\t\t\t\t\t\t\tobject[safeKey(key)] = read()\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn object\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (restoreMapsAsObject) {\n\t\t\t\t\t\t\t\tcurrentDecoder.mapsAsObjects = true\n\t\t\t\t\t\t\t\trestoreMapsAsObject = false\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlet map = new Map()\n\t\t\t\t\t\t\tif (currentDecoder.keyMap) {\n\t\t\t\t\t\t\t\tlet i = 0;\n\t\t\t\t\t\t\t\twhile((key = read()) != STOP_CODE) {\n\t\t\t\t\t\t\t\t\tif (i++ >= maxMapSize) {\n\t\t\t\t\t\t\t\t\t\tthrow new Error(`Map size exceeds ${maxMapSize}`);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tmap.set(currentDecoder.decodeKey(key), read())\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tlet i = 0;\n\t\t\t\t\t\t\t\twhile ((key = read()) != STOP_CODE) {\n\t\t\t\t\t\t\t\t\tif (i++ >= maxMapSize) {\n\t\t\t\t\t\t\t\t\t\tthrow new Error(`Map size exceeds ${maxMapSize}`);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tmap.set(key, read())\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn map\n\t\t\t\t\t\t}\n\t\t\t\t\tcase 7:\n\t\t\t\t\t\treturn STOP_CODE\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error('Invalid major type for indefinite length ' + majorType)\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Unknown token ' + token)\n\t\t}\n\t}\n\tswitch (majorType) {\n\t\tcase 0: // positive int\n\t\t\treturn token\n\t\tcase 1: // negative int\n\t\t\treturn ~token\n\t\tcase 2: // buffer\n\t\t\treturn readBin(token)\n\t\tcase 3: // string\n\t\t\tif (srcStringEnd >= position) {\n\t\t\t\treturn srcString.slice(position - srcStringStart, (position += token) - srcStringStart)\n\t\t\t}\n\t\t\tif (srcStringEnd == 0 && srcEnd < 140 && token < 32) {\n\t\t\t\t// for small blocks, avoiding the overhead of the extract call is helpful\n\t\t\t\tlet string = token < 16 ? shortStringInJS(token) : longStringInJS(token)\n\t\t\t\tif (string != null)\n\t\t\t\t\treturn string\n\t\t\t}\n\t\t\treturn readFixedString(token)\n\t\tcase 4: // array\n\t\t\tif (token >= maxArraySize) throw new Error(`Array length exceeds ${maxArraySize}`)\n\t\t\tlet array = new Array(token)\n\t\t  //if (currentDecoder.keyMap) for (let i = 0; i < token; i++) array[i] = currentDecoder.decodeKey(read())\t\n\t\t\t//else \n\t\t\tfor (let i = 0; i < token; i++) array[i] = read()\n\t\t\treturn array\n\t\tcase 5: // map\n\t\t\tif (token >= maxMapSize) throw new Error(`Map size exceeds ${maxArraySize}`)\n\t\t\tif (currentDecoder.mapsAsObjects) {\n\t\t\t\tlet object = {}\n\t\t\t\tif (currentDecoder.keyMap) for (let i = 0; i < token; i++) object[safeKey(currentDecoder.decodeKey(read()))] = read()\n\t\t\t\telse for (let i = 0; i < token; i++) object[safeKey(read())] = read()\n\t\t\t\treturn object\n\t\t\t} else {\n\t\t\t\tif (restoreMapsAsObject) {\n\t\t\t\t\tcurrentDecoder.mapsAsObjects = true\n\t\t\t\t\trestoreMapsAsObject = false\n\t\t\t\t}\n\t\t\t\tlet map = new Map()\n\t\t\t\tif (currentDecoder.keyMap) for (let i = 0; i < token; i++) map.set(currentDecoder.decodeKey(read()),read())\n\t\t\t\telse for (let i = 0; i < token; i++) map.set(read(), read())\n\t\t\t\treturn map\n\t\t\t}\n\t\tcase 6: // extension\n\t\t\tif (token >= BUNDLED_STRINGS_ID) {\n\t\t\t\tlet structure = currentStructures[token & 0x1fff] // check record structures first\n\t\t\t\t// At some point we may provide an option for dynamic tag assignment with a range like token >= 8 && (token < 16 || (token > 0x80 && token < 0xc0) || (token > 0x130 && token < 0x4000))\n\t\t\t\tif (structure) {\n\t\t\t\t\tif (!structure.read) structure.read = createStructureReader(structure)\n\t\t\t\t\treturn structure.read()\n\t\t\t\t}\n\t\t\t\tif (token < 0x10000) {\n\t\t\t\t\tif (token == RECORD_INLINE_ID) { // we do a special check for this so that we can keep the\n\t\t\t\t\t\t// currentExtensions as densely stored array (v8 stores arrays densely under about 3000 elements)\n\t\t\t\t\t\tlet length = readJustLength()\n\t\t\t\t\t\tlet id = read()\n\t\t\t\t\t\tlet structure = read()\n\t\t\t\t\t\trecordDefinition(id, structure)\n\t\t\t\t\t\tlet object = {}\n\t\t\t\t\t\tif (currentDecoder.keyMap) for (let i = 2; i < length; i++) {\n\t\t\t\t\t\t\tlet key = currentDecoder.decodeKey(structure[i - 2])\n\t\t\t\t\t\t\tobject[safeKey(key)] = read()\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse for (let i = 2; i < length; i++) {\n\t\t\t\t\t\t\tlet key = structure[i - 2]\n\t\t\t\t\t\t\tobject[safeKey(key)] = read()\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn object\n\t\t\t\t\t}\n\t\t\t\t\telse if (token == RECORD_DEFINITIONS_ID) {\n\t\t\t\t\t\tlet length = readJustLength()\n\t\t\t\t\t\tlet id = read()\n\t\t\t\t\t\tfor (let i = 2; i < length; i++) {\n\t\t\t\t\t\t\trecordDefinition(id++, read())\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn read()\n\t\t\t\t\t} else if (token == BUNDLED_STRINGS_ID) {\n\t\t\t\t\t\treturn readBundleExt()\n\t\t\t\t\t}\n\t\t\t\t\tif (currentDecoder.getShared) {\n\t\t\t\t\t\tloadShared()\n\t\t\t\t\t\tstructure = currentStructures[token & 0x1fff]\n\t\t\t\t\t\tif (structure) {\n\t\t\t\t\t\t\tif (!structure.read)\n\t\t\t\t\t\t\t\tstructure.read = createStructureReader(structure)\n\t\t\t\t\t\t\treturn structure.read()\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet extension = currentExtensions[token]\n\t\t\tif (extension) {\n\t\t\t\tif (extension.handlesRead)\n\t\t\t\t\treturn extension(read)\n\t\t\t\telse\n\t\t\t\t\treturn extension(read())\n\t\t\t} else {\n\t\t\t\tlet input = read()\n\t\t\t\tfor (let i = 0; i < currentExtensionRanges.length; i++) {\n\t\t\t\t\tlet value = currentExtensionRanges[i](token, input)\n\t\t\t\t\tif (value !== undefined)\n\t\t\t\t\t\treturn value\n\t\t\t\t}\n\t\t\t\treturn new Tag(input, token)\n\t\t\t}\n\t\tcase 7: // fixed value\n\t\t\tswitch (token) {\n\t\t\t\tcase 0x14: return false\n\t\t\t\tcase 0x15: return true\n\t\t\t\tcase 0x16: return null\n\t\t\t\tcase 0x17: return; // undefined\n\t\t\t\tcase 0x1f:\n\t\t\t\tdefault:\n\t\t\t\t\tlet packedValue = (packedValues || getPackedValues())[token]\n\t\t\t\t\tif (packedValue !== undefined)\n\t\t\t\t\t\treturn packedValue\n\t\t\t\t\tthrow new Error('Unknown token ' + token)\n\t\t\t}\n\t\tdefault: // negative int\n\t\t\tif (isNaN(token)) {\n\t\t\t\tlet error = new Error('Unexpected end of CBOR data')\n\t\t\t\terror.incomplete = true\n\t\t\t\tthrow error\n\t\t\t}\n\t\t\tthrow new Error('Unknown CBOR token ' + token)\n\t}\n}\nconst validName = /^[a-zA-Z_$][a-zA-Z\\d_$]*$/\nfunction createStructureReader(structure) {\n\tif (!structure) throw new Error('Structure is required in record definition');\n\tfunction readObject() {\n\t\t// get the array size from the header\n\t\tlet length = src[position++]\n\t\t//let majorType = token >> 5\n\t\tlength = length & 0x1f\n\t\tif (length > 0x17) {\n\t\t\tswitch (length) {\n\t\t\t\tcase 0x18:\n\t\t\t\t\tlength = src[position++]\n\t\t\t\t\tbreak\n\t\t\t\tcase 0x19:\n\t\t\t\t\tlength = dataView.getUint16(position)\n\t\t\t\t\tposition += 2\n\t\t\t\t\tbreak\n\t\t\t\tcase 0x1a:\n\t\t\t\t\tlength = dataView.getUint32(position)\n\t\t\t\t\tposition += 4\n\t\t\t\t\tbreak\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('Expected array header, but got ' + src[position - 1])\n\t\t\t}\n\t\t}\n\t\t// This initial function is quick to instantiate, but runs slower. After several iterations pay the cost to build the faster function\n\t\tlet compiledReader = this.compiledReader // first look to see if we have the fast compiled function\n\t\twhile(compiledReader) {\n\t\t\t// we have a fast compiled object literal reader\n\t\t\tif (compiledReader.propertyCount === length)\n\t\t\t\treturn compiledReader(read) // with the right length, so we use it\n\t\t\tcompiledReader = compiledReader.next // see if there is another reader with the right length\n\t\t}\n\t\tif (this.slowReads++ >= inlineObjectReadThreshold) { // create a fast compiled reader\n\t\t\tlet array = this.length == length ? this : this.slice(0, length)\n\t\t\tcompiledReader = currentDecoder.keyMap \n\t\t\t? new Function('r', 'return {' + array.map(k => currentDecoder.decodeKey(k)).map(k => validName.test(k) ? safeKey(k) + ':r()' : ('[' + JSON.stringify(k) + ']:r()')).join(',') + '}')\n\t\t\t: new Function('r', 'return {' + array.map(key => validName.test(key) ? safeKey(key) + ':r()' : ('[' + JSON.stringify(key) + ']:r()')).join(',') + '}')\n\t\t\tif (this.compiledReader)\n\t\t\t\tcompiledReader.next = this.compiledReader // if there is an existing one, we store multiple readers as a linked list because it is usually pretty rare to have multiple readers (of different length) for the same structure\n\t\t\tcompiledReader.propertyCount = length\n\t\t\tthis.compiledReader = compiledReader\n\t\t\treturn compiledReader(read)\n\t\t}\n\t\tlet object = {}\n\t\tif (currentDecoder.keyMap) for (let i = 0; i < length; i++) object[safeKey(currentDecoder.decodeKey(this[i]))] = read()\n\t\telse for (let i = 0; i < length; i++) {\n\t\t\tobject[safeKey(this[i])] = read();\n\t\t}\n\t\treturn object\n\t}\n\tstructure.slowReads = 0\n\treturn readObject\n}\n\nfunction safeKey(key) {\n\t// protect against prototype pollution\n\tif (typeof key === 'string') return key === '__proto__' ? '__proto_' : key\n\tif (typeof key === 'number' || typeof key === 'boolean' || typeof key === 'bigint') return key.toString();\n\tif (key == null) return key + '';\n\t// protect against expensive (DoS) string conversions\n\tthrow new Error('Invalid property name type ' + typeof key);\n}\n\nlet readFixedString = readStringJS\nlet readString8 = readStringJS\nlet readString16 = readStringJS\nlet readString32 = readStringJS\n\nexport let isNativeAccelerationEnabled = false\nexport function setExtractor(extractStrings) {\n\tisNativeAccelerationEnabled = true\n\treadFixedString = readString(1)\n\treadString8 = readString(2)\n\treadString16 = readString(3)\n\treadString32 = readString(5)\n\tfunction readString(headerLength) {\n\t\treturn function readString(length) {\n\t\t\tlet string = strings[stringPosition++]\n\t\t\tif (string == null) {\n\t\t\t\tif (bundledStrings)\n\t\t\t\t\treturn readStringJS(length)\n\t\t\t\tlet extraction = extractStrings(position, srcEnd, length, src)\n\t\t\t\tif (typeof extraction == 'string') {\n\t\t\t\t\tstring = extraction\n\t\t\t\t\tstrings = EMPTY_ARRAY\n\t\t\t\t} else {\n\t\t\t\t\tstrings = extraction\n\t\t\t\t\tstringPosition = 1\n\t\t\t\t\tsrcStringEnd = 1 // even if a utf-8 string was decoded, must indicate we are in the midst of extracted strings and can't skip strings\n\t\t\t\t\tstring = strings[0]\n\t\t\t\t\tif (string === undefined)\n\t\t\t\t\t\tthrow new Error('Unexpected end of buffer')\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet srcStringLength = string.length\n\t\t\tif (srcStringLength <= length) {\n\t\t\t\tposition += length\n\t\t\t\treturn string\n\t\t\t}\n\t\t\tsrcString = string\n\t\t\tsrcStringStart = position\n\t\t\tsrcStringEnd = position + srcStringLength\n\t\t\tposition += length\n\t\t\treturn string.slice(0, length) // we know we just want the beginning\n\t\t}\n\t}\n}\nfunction readStringJS(length) {\n\tlet result\n\tif (length < 16) {\n\t\tif (result = shortStringInJS(length))\n\t\t\treturn result\n\t}\n\tif (length > 64 && decoder)\n\t\treturn decoder.decode(src.subarray(position, position += length))\n\tconst end = position + length\n\tconst units = []\n\tresult = ''\n\twhile (position < end) {\n\t\tconst byte1 = src[position++]\n\t\tif ((byte1 & 0x80) === 0) {\n\t\t\t// 1 byte\n\t\t\tunits.push(byte1)\n\t\t} else if ((byte1 & 0xe0) === 0xc0) {\n\t\t\t// 2 bytes\n\t\t\tconst byte2 = src[position++] & 0x3f\n\t\t\tunits.push(((byte1 & 0x1f) << 6) | byte2)\n\t\t} else if ((byte1 & 0xf0) === 0xe0) {\n\t\t\t// 3 bytes\n\t\t\tconst byte2 = src[position++] & 0x3f\n\t\t\tconst byte3 = src[position++] & 0x3f\n\t\t\tunits.push(((byte1 & 0x1f) << 12) | (byte2 << 6) | byte3)\n\t\t} else if ((byte1 & 0xf8) === 0xf0) {\n\t\t\t// 4 bytes\n\t\t\tconst byte2 = src[position++] & 0x3f\n\t\t\tconst byte3 = src[position++] & 0x3f\n\t\t\tconst byte4 = src[position++] & 0x3f\n\t\t\tlet unit = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0c) | (byte3 << 0x06) | byte4\n\t\t\tif (unit > 0xffff) {\n\t\t\t\tunit -= 0x10000\n\t\t\t\tunits.push(((unit >>> 10) & 0x3ff) | 0xd800)\n\t\t\t\tunit = 0xdc00 | (unit & 0x3ff)\n\t\t\t}\n\t\t\tunits.push(unit)\n\t\t} else {\n\t\t\tunits.push(byte1)\n\t\t}\n\n\t\tif (units.length >= 0x1000) {\n\t\t\tresult += fromCharCode.apply(String, units)\n\t\t\tunits.length = 0\n\t\t}\n\t}\n\n\tif (units.length > 0) {\n\t\tresult += fromCharCode.apply(String, units)\n\t}\n\n\treturn result\n}\nlet fromCharCode = String.fromCharCode\nfunction longStringInJS(length) {\n\tlet start = position\n\tlet bytes = new Array(length)\n\tfor (let i = 0; i < length; i++) {\n\t\tconst byte = src[position++];\n\t\tif ((byte & 0x80) > 0) {\n\t\t\tposition = start\n    \t\t\treturn\n    \t\t}\n    \t\tbytes[i] = byte\n    \t}\n    \treturn fromCharCode.apply(String, bytes)\n}\nfunction shortStringInJS(length) {\n\tif (length < 4) {\n\t\tif (length < 2) {\n\t\t\tif (length === 0)\n\t\t\t\treturn ''\n\t\t\telse {\n\t\t\t\tlet a = src[position++]\n\t\t\t\tif ((a & 0x80) > 1) {\n\t\t\t\t\tposition -= 1\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\treturn fromCharCode(a)\n\t\t\t}\n\t\t} else {\n\t\t\tlet a = src[position++]\n\t\t\tlet b = src[position++]\n\t\t\tif ((a & 0x80) > 0 || (b & 0x80) > 0) {\n\t\t\t\tposition -= 2\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif (length < 3)\n\t\t\t\treturn fromCharCode(a, b)\n\t\t\tlet c = src[position++]\n\t\t\tif ((c & 0x80) > 0) {\n\t\t\t\tposition -= 3\n\t\t\t\treturn\n\t\t\t}\n\t\t\treturn fromCharCode(a, b, c)\n\t\t}\n\t} else {\n\t\tlet a = src[position++]\n\t\tlet b = src[position++]\n\t\tlet c = src[position++]\n\t\tlet d = src[position++]\n\t\tif ((a & 0x80) > 0 || (b & 0x80) > 0 || (c & 0x80) > 0 || (d & 0x80) > 0) {\n\t\t\tposition -= 4\n\t\t\treturn\n\t\t}\n\t\tif (length < 6) {\n\t\t\tif (length === 4)\n\t\t\t\treturn fromCharCode(a, b, c, d)\n\t\t\telse {\n\t\t\t\tlet e = src[position++]\n\t\t\t\tif ((e & 0x80) > 0) {\n\t\t\t\t\tposition -= 5\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\treturn fromCharCode(a, b, c, d, e)\n\t\t\t}\n\t\t} else if (length < 8) {\n\t\t\tlet e = src[position++]\n\t\t\tlet f = src[position++]\n\t\t\tif ((e & 0x80) > 0 || (f & 0x80) > 0) {\n\t\t\t\tposition -= 6\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif (length < 7)\n\t\t\t\treturn fromCharCode(a, b, c, d, e, f)\n\t\t\tlet g = src[position++]\n\t\t\tif ((g & 0x80) > 0) {\n\t\t\t\tposition -= 7\n\t\t\t\treturn\n\t\t\t}\n\t\t\treturn fromCharCode(a, b, c, d, e, f, g)\n\t\t} else {\n\t\t\tlet e = src[position++]\n\t\t\tlet f = src[position++]\n\t\t\tlet g = src[position++]\n\t\t\tlet h = src[position++]\n\t\t\tif ((e & 0x80) > 0 || (f & 0x80) > 0 || (g & 0x80) > 0 || (h & 0x80) > 0) {\n\t\t\t\tposition -= 8\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif (length < 10) {\n\t\t\t\tif (length === 8)\n\t\t\t\t\treturn fromCharCode(a, b, c, d, e, f, g, h)\n\t\t\t\telse {\n\t\t\t\t\tlet i = src[position++]\n\t\t\t\t\tif ((i & 0x80) > 0) {\n\t\t\t\t\t\tposition -= 9\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\treturn fromCharCode(a, b, c, d, e, f, g, h, i)\n\t\t\t\t}\n\t\t\t} else if (length < 12) {\n\t\t\t\tlet i = src[position++]\n\t\t\t\tlet j = src[position++]\n\t\t\t\tif ((i & 0x80) > 0 || (j & 0x80) > 0) {\n\t\t\t\t\tposition -= 10\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif (length < 11)\n\t\t\t\t\treturn fromCharCode(a, b, c, d, e, f, g, h, i, j)\n\t\t\t\tlet k = src[position++]\n\t\t\t\tif ((k & 0x80) > 0) {\n\t\t\t\t\tposition -= 11\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\treturn fromCharCode(a, b, c, d, e, f, g, h, i, j, k)\n\t\t\t} else {\n\t\t\t\tlet i = src[position++]\n\t\t\t\tlet j = src[position++]\n\t\t\t\tlet k = src[position++]\n\t\t\t\tlet l = src[position++]\n\t\t\t\tif ((i & 0x80) > 0 || (j & 0x80) > 0 || (k & 0x80) > 0 || (l & 0x80) > 0) {\n\t\t\t\t\tposition -= 12\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif (length < 14) {\n\t\t\t\t\tif (length === 12)\n\t\t\t\t\t\treturn fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l)\n\t\t\t\t\telse {\n\t\t\t\t\t\tlet m = src[position++]\n\t\t\t\t\t\tif ((m & 0x80) > 0) {\n\t\t\t\t\t\t\tposition -= 13\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlet m = src[position++]\n\t\t\t\t\tlet n = src[position++]\n\t\t\t\t\tif ((m & 0x80) > 0 || (n & 0x80) > 0) {\n\t\t\t\t\t\tposition -= 14\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tif (length < 15)\n\t\t\t\t\t\treturn fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m, n)\n\t\t\t\t\tlet o = src[position++]\n\t\t\t\t\tif ((o & 0x80) > 0) {\n\t\t\t\t\t\tposition -= 15\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\treturn fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction readBin(length) {\n\treturn currentDecoder.copyBuffers ?\n\t\t// specifically use the copying slice (not the node one)\n\t\tUint8Array.prototype.slice.call(src, position, position += length) :\n\t\tsrc.subarray(position, position += length)\n}\nfunction readExt(length) {\n\tlet type = src[position++]\n\tif (currentExtensions[type]) {\n\t\treturn currentExtensions[type](src.subarray(position, position += length))\n\t}\n\telse\n\t\tthrow new Error('Unknown extension type ' + type)\n}\nlet f32Array = new Float32Array(1)\nlet u8Array = new Uint8Array(f32Array.buffer, 0, 4)\nfunction getFloat16() {\n\tlet byte0 = src[position++]\n\tlet byte1 = src[position++]\n\tlet exponent = (byte0 & 0x7f) >> 2;\n\tif (exponent === 0x1f) { // specials\n\t\tif (byte1 || (byte0 & 3))\n\t\t\treturn NaN;\n\t\treturn (byte0 & 0x80) ? -Infinity : Infinity;\n\t}\n\tif (exponent === 0) { // sub-normals\n\t\t// significand with 10 fractional bits and divided by 2^14\n\t\tlet abs = (((byte0 & 3) << 8) | byte1) / (1 << 24)\n\t\treturn (byte0 & 0x80) ? -abs : abs\n\t}\n\n\tu8Array[3] = (byte0 & 0x80) | // sign bit\n\t\t((exponent >> 1) + 56) // 4 of 5 of the exponent bits, re-offset-ed\n\tu8Array[2] = ((byte0 & 7) << 5) | // last exponent bit and first two mantissa bits\n\t\t(byte1 >> 3) // next 5 bits of mantissa\n\tu8Array[1] = byte1 << 5; // last three bits of mantissa\n\tu8Array[0] = 0;\n\treturn f32Array[0];\n}\n\nlet keyCache = new Array(4096)\nfunction readKey() {\n\tlet length = src[position++]\n\tif (length >= 0x60 && length < 0x78) {\n\t\t// fixstr, potentially use key cache\n\t\tlength = length - 0x60\n\t\tif (srcStringEnd >= position) // if it has been extracted, must use it (and faster anyway)\n\t\t\treturn srcString.slice(position - srcStringStart, (position += length) - srcStringStart)\n\t\telse if (!(srcStringEnd == 0 && srcEnd < 180))\n\t\t\treturn readFixedString(length)\n\t} else { // not cacheable, go back and do a standard read\n\t\tposition--\n\t\treturn read()\n\t}\n\tlet key = ((length << 5) ^ (length > 1 ? dataView.getUint16(position) : length > 0 ? src[position] : 0)) & 0xfff\n\tlet entry = keyCache[key]\n\tlet checkPosition = position\n\tlet end = position + length - 3\n\tlet chunk\n\tlet i = 0\n\tif (entry && entry.bytes == length) {\n\t\twhile (checkPosition < end) {\n\t\t\tchunk = dataView.getUint32(checkPosition)\n\t\t\tif (chunk != entry[i++]) {\n\t\t\t\tcheckPosition = 0x70000000\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcheckPosition += 4\n\t\t}\n\t\tend += 3\n\t\twhile (checkPosition < end) {\n\t\t\tchunk = src[checkPosition++]\n\t\t\tif (chunk != entry[i++]) {\n\t\t\t\tcheckPosition = 0x70000000\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif (checkPosition === end) {\n\t\t\tposition = checkPosition\n\t\t\treturn entry.string\n\t\t}\n\t\tend -= 3\n\t\tcheckPosition = position\n\t}\n\tentry = []\n\tkeyCache[key] = entry\n\tentry.bytes = length\n\twhile (checkPosition < end) {\n\t\tchunk = dataView.getUint32(checkPosition)\n\t\tentry.push(chunk)\n\t\tcheckPosition += 4\n\t}\n\tend += 3\n\twhile (checkPosition < end) {\n\t\tchunk = src[checkPosition++]\n\t\tentry.push(chunk)\n\t}\n\t// for small blocks, avoiding the overhead of the extract call is helpful\n\tlet string = length < 16 ? shortStringInJS(length) : longStringInJS(length)\n\tif (string != null)\n\t\treturn entry.string = string\n\treturn entry.string = readFixedString(length)\n}\n\nexport class Tag {\n\tconstructor(value, tag) {\n\t\tthis.value = value\n\t\tthis.tag = tag\n\t}\n}\n\ncurrentExtensions[0] = (dateString) => {\n\t// string date extension\n\treturn new Date(dateString)\n}\n\ncurrentExtensions[1] = (epochSec) => {\n\t// numeric date extension\n\treturn new Date(Math.round(epochSec * 1000))\n}\n\ncurrentExtensions[2] = (buffer) => {\n\t// bigint extension\n\tlet value = BigInt(0)\n\tfor (let i = 0, l = buffer.byteLength; i < l; i++) {\n\t\tvalue = BigInt(buffer[i]) + (value << BigInt(8))\n\t}\n\treturn value\n}\n\ncurrentExtensions[3] = (buffer) => {\n\t// negative bigint extension\n\treturn BigInt(-1) - currentExtensions[2](buffer)\n}\ncurrentExtensions[4] = (fraction) => {\n\t// best to reparse to maintain accuracy\n\treturn +(fraction[1] + 'e' + fraction[0])\n}\n\ncurrentExtensions[5] = (fraction) => {\n\t// probably not sufficiently accurate\n\treturn fraction[1] * Math.exp(fraction[0] * Math.log(2))\n}\n\n// the registration of the record definition extension\nconst recordDefinition = (id, structure) => {\n\tid = id - 0xe000\n\tlet existingStructure = currentStructures[id]\n\tif (existingStructure && existingStructure.isShared) {\n\t\t(currentStructures.restoreStructures || (currentStructures.restoreStructures = []))[id] = existingStructure\n\t}\n\tcurrentStructures[id] = structure\n\n\tstructure.read = createStructureReader(structure)\n}\ncurrentExtensions[LEGACY_RECORD_INLINE_ID] = (data) => {\n\tlet length = data.length\n\tlet structure = data[1]\n\trecordDefinition(data[0], structure)\n\tlet object = {}\n\tfor (let i = 2; i < length; i++) {\n\t\tlet key = structure[i - 2]\n\t\tobject[safeKey(key)] = data[i]\n\t}\n\treturn object\n}\ncurrentExtensions[14] = (value) => {\n\tif (bundledStrings)\n\t\treturn bundledStrings[0].slice(bundledStrings.position0, bundledStrings.position0 += value)\n\treturn new Tag(value, 14)\n}\ncurrentExtensions[15] = (value) => {\n\tif (bundledStrings)\n\t\treturn bundledStrings[1].slice(bundledStrings.position1, bundledStrings.position1 += value)\n\treturn new Tag(value, 15)\n}\nlet glbl = { Error, RegExp }\ncurrentExtensions[27] = (data) => { // http://cbor.schmorp.de/generic-object\n\treturn (glbl[data[0]] || Error)(data[1], data[2])\n}\nconst packedTable = (read) => {\n\tif (src[position++] != 0x84) {\n\t\tlet error = new Error('Packed values structure must be followed by a 4 element array')\n\t\tif (src.length < position)\n\t\t\terror.incomplete = true\n\t\tthrow error\n\t}\n\tlet newPackedValues = read() // packed values\n\tif (!newPackedValues || !newPackedValues.length) {\n\t\tlet error = new Error('Packed values structure must be followed by a 4 element array')\n\t\terror.incomplete = true\n\t\tthrow error\n\t}\n\tpackedValues = packedValues ? newPackedValues.concat(packedValues.slice(newPackedValues.length)) : newPackedValues\n\tpackedValues.prefixes = read()\n\tpackedValues.suffixes = read()\n\treturn read() // read the rump\n}\npackedTable.handlesRead = true\ncurrentExtensions[51] = packedTable\n\ncurrentExtensions[PACKED_REFERENCE_TAG_ID] = (data) => { // packed reference\n\tif (!packedValues) {\n\t\tif (currentDecoder.getShared)\n\t\t\tloadShared()\n\t\telse\n\t\t\treturn new Tag(data, PACKED_REFERENCE_TAG_ID)\n\t}\n\tif (typeof data == 'number')\n\t\treturn packedValues[16 + (data >= 0 ? 2 * data : (-2 * data - 1))]\n\tlet error = new Error('No support for non-integer packed references yet')\n\tif (data === undefined)\n\t\terror.incomplete = true\n\tthrow error\n}\n\n// The following code is an incomplete implementation of http://cbor.schmorp.de/stringref\n// the real thing would need to implemennt more logic to populate the stringRefs table and\n// maintain a stack of stringRef \"namespaces\".\n//\n// currentExtensions[25] = (id) => {\n// \treturn stringRefs[id]\n// }\n// currentExtensions[256] = (read) => {\n// \tstringRefs = []\n// \ttry {\n// \t\treturn read()\n// \t} finally {\n// \t\tstringRefs = null\n// \t}\n// }\n// currentExtensions[256].handlesRead = true\n\ncurrentExtensions[28] = (read) => { \n\t// shareable http://cbor.schmorp.de/value-sharing (for structured clones)\n\tif (!referenceMap) {\n\t\treferenceMap = new Map()\n\t\treferenceMap.id = 0\n\t}\n\tlet id = referenceMap.id++\n\tlet startingPosition = position\n\tlet token = src[position]\n\tlet target\n\t// TODO: handle Maps, Sets, and other types that can cycle; this is complicated, because you potentially need to read\n\t// ahead past references to record structure definitions\n\tif ((token >> 5) == 4)\n\t\ttarget = []\n\telse\n\t\ttarget = {}\n\n\tlet refEntry = { target } // a placeholder object\n\treferenceMap.set(id, refEntry)\n\tlet targetProperties = read() // read the next value as the target object to id\n\tif (refEntry.used) {// there is a cycle, so we have to assign properties to original target\n\t\tif (Object.getPrototypeOf(target) !== Object.getPrototypeOf(targetProperties)) {\n\t\t\t// this means that the returned target does not match the targetProperties, so we need rerun the read to\n\t\t\t// have the correctly create instance be assigned as a reference, then we do the copy the properties back to the\n\t\t\t// target\n\t\t\t// reset the position so that the read can be repeated\n\t\t\tposition = startingPosition\n\t\t\t// the returned instance is our new target for references\n\t\t\ttarget = targetProperties\n\t\t\treferenceMap.set(id, { target })\n\t\t\ttargetProperties = read()\n\t\t}\n\t\treturn Object.assign(target, targetProperties)\n\t}\n\trefEntry.target = targetProperties // the placeholder wasn't used, replace with the deserialized one\n\treturn targetProperties // no cycle, can just use the returned read object\n}\ncurrentExtensions[28].handlesRead = true\n\ncurrentExtensions[29] = (id) => {\n\t// sharedref http://cbor.schmorp.de/value-sharing (for structured clones)\n\tlet refEntry = referenceMap.get(id)\n\trefEntry.used = true\n\treturn refEntry.target\n}\n\ncurrentExtensions[258] = (array) => new Set(array); // https://github.com/input-output-hk/cbor-sets-spec/blob/master/CBOR_SETS.md\n(currentExtensions[259] = (read) => {\n\t// https://github.com/shanewholloway/js-cbor-codec/blob/master/docs/CBOR-259-spec\n\t// for decoding as a standard Map\n\tif (currentDecoder.mapsAsObjects) {\n\t\tcurrentDecoder.mapsAsObjects = false\n\t\trestoreMapsAsObject = true\n\t}\n\treturn read()\n}).handlesRead = true\nfunction combine(a, b) {\n\tif (typeof a === 'string')\n\t\treturn a + b\n\tif (a instanceof Array)\n\t\treturn a.concat(b)\n\treturn Object.assign({}, a, b)\n}\nfunction getPackedValues() {\n\tif (!packedValues) {\n\t\tif (currentDecoder.getShared)\n\t\t\tloadShared()\n\t\telse\n\t\t\tthrow new Error('No packed values available')\n\t}\n\treturn packedValues\n}\nconst SHARED_DATA_TAG_ID = 0x53687264 // ascii 'Shrd'\ncurrentExtensionRanges.push((tag, input) => {\n\tif (tag >= 225 && tag <= 255)\n\t\treturn combine(getPackedValues().prefixes[tag - 224], input)\n\tif (tag >= 28704 && tag <= 32767)\n\t\treturn combine(getPackedValues().prefixes[tag - 28672], input)\n\tif (tag >= 1879052288 && tag <= 2147483647)\n\t\treturn combine(getPackedValues().prefixes[tag - 1879048192], input)\n\tif (tag >= 216 && tag <= 223)\n\t\treturn combine(input, getPackedValues().suffixes[tag - 216])\n\tif (tag >= 27647 && tag <= 28671)\n\t\treturn combine(input, getPackedValues().suffixes[tag - 27639])\n\tif (tag >= 1811940352 && tag <= 1879048191)\n\t\treturn combine(input, getPackedValues().suffixes[tag - 1811939328])\n\tif (tag == SHARED_DATA_TAG_ID) {// we do a special check for this so that we can keep the currentExtensions as densely stored array (v8 stores arrays densely under about 3000 elements)\n\t\treturn {\n\t\t\tpackedValues: packedValues,\n\t\t\tstructures: currentStructures.slice(0),\n\t\t\tversion: input,\n\t\t}\n\t}\n\tif (tag == 55799) // self-descriptive CBOR tag, just return input value\n\t\treturn input\n})\n\nconst isLittleEndianMachine = new Uint8Array(new Uint16Array([1]).buffer)[0] == 1\nexport const typedArrays = [Uint8Array, Uint8ClampedArray, Uint16Array, Uint32Array,\n\ttypeof BigUint64Array == 'undefined' ? { name:'BigUint64Array' } : BigUint64Array, Int8Array, Int16Array, Int32Array,\n\ttypeof BigInt64Array == 'undefined' ? { name:'BigInt64Array' } : BigInt64Array, Float32Array, Float64Array]\nconst typedArrayTags = [64, 68, 69, 70, 71, 72, 77, 78, 79, 85, 86]\nfor (let i = 0; i < typedArrays.length; i++) {\n\tregisterTypedArray(typedArrays[i], typedArrayTags[i])\n}\nfunction registerTypedArray(TypedArray, tag) {\n\tlet dvMethod = 'get' + TypedArray.name.slice(0, -5)\n\tlet bytesPerElement;\n\tif (typeof TypedArray === 'function')\n\t\tbytesPerElement = TypedArray.BYTES_PER_ELEMENT;\n\telse\n\t\tTypedArray = null;\n\tfor (let littleEndian = 0; littleEndian < 2; littleEndian++) {\n\t\tif (!littleEndian && bytesPerElement == 1)\n\t\t\tcontinue\n\t\tlet sizeShift = bytesPerElement == 2 ? 1 : bytesPerElement == 4 ? 2 : bytesPerElement == 8 ? 3 : 0\n\t\tcurrentExtensions[littleEndian ? tag : (tag - 4)] = (bytesPerElement == 1 || littleEndian == isLittleEndianMachine) ? (buffer) => {\n\t\t\tif (!TypedArray)\n\t\t\t\tthrow new Error('Could not find typed array for code ' + tag)\n\t\t\tif (!currentDecoder.copyBuffers) {\n\t\t\t\t// try provide a direct view, but will only work if we are byte-aligned\n\t\t\t\tif (bytesPerElement === 1 ||\n\t\t\t\t\tbytesPerElement === 2 && !(buffer.byteOffset & 1) ||\n\t\t\t\t\tbytesPerElement === 4 && !(buffer.byteOffset & 3) ||\n\t\t\t\t\tbytesPerElement === 8 && !(buffer.byteOffset & 7))\n\t\t\t\t\treturn new TypedArray(buffer.buffer, buffer.byteOffset, buffer.byteLength >> sizeShift);\n\t\t\t}\n\t\t\t// we have to slice/copy here to get a new ArrayBuffer, if we are not word/byte aligned\n\t\t\treturn new TypedArray(Uint8Array.prototype.slice.call(buffer, 0).buffer)\n\t\t} : buffer => {\n\t\t\tif (!TypedArray)\n\t\t\t\tthrow new Error('Could not find typed array for code ' + tag)\n\t\t\tlet dv = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength)\n\t\t\tlet elements = buffer.length >> sizeShift\n\t\t\tlet ta = new TypedArray(elements)\n\t\t\tlet method = dv[dvMethod]\n\t\t\tfor (let i = 0; i < elements; i++) {\n\t\t\t\tta[i] = method.call(dv, i << sizeShift, littleEndian)\n\t\t\t}\n\t\t\treturn ta\n\t\t}\n\t}\n}\n\nfunction readBundleExt() {\n\tlet length = readJustLength()\n\tlet bundlePosition = position + read()\n\tfor (let i = 2; i < length; i++) {\n\t\t// skip past bundles that were already read\n\t\tlet bundleLength = readJustLength() // this will increment position, so must add to position afterwards\n\t\tposition += bundleLength\n\t}\n\tlet dataPosition = position\n\tposition = bundlePosition\n\tbundledStrings = [readStringJS(readJustLength()), readStringJS(readJustLength())]\n\tbundledStrings.position0 = 0\n\tbundledStrings.position1 = 0\n\tbundledStrings.postBundlePosition = position\n\tposition = dataPosition\n\treturn read()\n}\n\nfunction readJustLength() {\n\tlet token = src[position++] & 0x1f\n\tif (token > 0x17) {\n\t\tswitch (token) {\n\t\t\tcase 0x18:\n\t\t\t\ttoken = src[position++]\n\t\t\t\tbreak\n\t\t\tcase 0x19:\n\t\t\t\ttoken = dataView.getUint16(position)\n\t\t\t\tposition += 2\n\t\t\t\tbreak\n\t\t\tcase 0x1a:\n\t\t\t\ttoken = dataView.getUint32(position)\n\t\t\t\tposition += 4\n\t\t\t\tbreak\n\t\t}\n\t}\n\treturn token\n}\n\nfunction loadShared() {\n\tif (currentDecoder.getShared) {\n\t\tlet sharedData = saveState(() => {\n\t\t\t// save the state in case getShared modifies our buffer\n\t\t\tsrc = null\n\t\t\treturn currentDecoder.getShared()\n\t\t}) || {}\n\t\tlet updatedStructures = sharedData.structures || []\n\t\tcurrentDecoder.sharedVersion = sharedData.version\n\t\tpackedValues = currentDecoder.sharedValues = sharedData.packedValues\n\t\tif (currentStructures === true)\n\t\t\tcurrentDecoder.structures = currentStructures = updatedStructures\n\t\telse\n\t\t\tcurrentStructures.splice.apply(currentStructures, [0, updatedStructures.length].concat(updatedStructures))\n\t}\n}\n\nfunction saveState(callback) {\n\tlet savedSrcEnd = srcEnd\n\tlet savedPosition = position\n\tlet savedStringPosition = stringPosition\n\tlet savedSrcStringStart = srcStringStart\n\tlet savedSrcStringEnd = srcStringEnd\n\tlet savedSrcString = srcString\n\tlet savedStrings = strings\n\tlet savedReferenceMap = referenceMap\n\tlet savedBundledStrings = bundledStrings\n\n\t// TODO: We may need to revisit this if we do more external calls to user code (since it could be slow)\n\tlet savedSrc = new Uint8Array(src.slice(0, srcEnd)) // we copy the data in case it changes while external data is processed\n\tlet savedStructures = currentStructures\n\tlet savedDecoder = currentDecoder\n\tlet savedSequentialMode = sequentialMode\n\tlet value = callback()\n\tsrcEnd = savedSrcEnd\n\tposition = savedPosition\n\tstringPosition = savedStringPosition\n\tsrcStringStart = savedSrcStringStart\n\tsrcStringEnd = savedSrcStringEnd\n\tsrcString = savedSrcString\n\tstrings = savedStrings\n\treferenceMap = savedReferenceMap\n\tbundledStrings = savedBundledStrings\n\tsrc = savedSrc\n\tsequentialMode = savedSequentialMode\n\tcurrentStructures = savedStructures\n\tcurrentDecoder = savedDecoder\n\tdataView = new DataView(src.buffer, src.byteOffset, src.byteLength)\n\treturn value\n}\nexport function clearSource() {\n\tsrc = null\n\treferenceMap = null\n\tcurrentStructures = null\n}\n\nexport function addExtension(extension) {\n\tcurrentExtensions[extension.tag] = extension.decode\n}\n\nexport function setSizeLimits(limits) {\n\tif (limits.maxMapSize) maxMapSize = limits.maxMapSize;\n\tif (limits.maxArraySize) maxArraySize = limits.maxArraySize;\n\tif (limits.maxObjectSize) maxObjectSize = limits.maxObjectSize;\n}\n\nexport const mult10 = new Array(147) // this is a table matching binary exponents to the multiplier to determine significant digit rounding\nfor (let i = 0; i < 256; i++) {\n\tmult10[i] = +('1e' + Math.floor(45.15 - i * 0.30103))\n}\nlet defaultDecoder = new Decoder({ useRecords: false })\nexport const decode = defaultDecoder.decode\nexport const decodeMultiple = defaultDecoder.decodeMultiple\nexport const FLOAT32_OPTIONS = {\n\tNEVER: 0,\n\tALWAYS: 1,\n\tDECIMAL_ROUND: 3,\n\tDECIMAL_FIT: 4\n}\nexport function roundFloat32(float32Number) {\n\tf32Array[0] = float32Number\n\tlet multiplier = mult10[((u8Array[3] & 0x7f) << 1) | (u8Array[2] >> 7)]\n\treturn ((multiplier * float32Number + (float32Number > 0 ? 0.5 : -0.5)) >> 0) / multiplier\n}\n", "import { Encoder } from './encode.js'\nimport { Decoder } from './decode.js'\n\n/**\n * Given an Iterable first argument, returns an Iterable where each value is encoded as a Buffer\n * If the argument is only Async Iterable, the return value will be an Async Iterable.\n * @param {Iterable|Iterator|AsyncIterable|AsyncIterator} objectIterator - iterable source, like a Readable object stream, an array, Set, or custom object\n * @param {options} [options] - cbor-x Encoder options\n * @returns {IterableIterator|Promise.<AsyncIterableIterator>}\n */\nexport function encodeIter (objectIterator, options = {}) {\n  if (!objectIterator || typeof objectIterator !== 'object') {\n    throw new Error('first argument must be an Iterable, Async Iterable, or a Promise for an Async Iterable')\n  } else if (typeof objectIterator[Symbol.iterator] === 'function') {\n    return encodeIterSync(objectIterator, options)\n  } else if (typeof objectIterator.then === 'function' || typeof objectIterator[Symbol.asyncIterator] === 'function') {\n    return encodeIterAsync(objectIterator, options)\n  } else {\n    throw new Error('first argument must be an Iterable, Async Iterable, Iterator, Async Iterator, or a Promise')\n  }\n}\n\nfunction * encodeIterSync (objectIterator, options) {\n  const encoder = new Encoder(options)\n  for (const value of objectIterator) {\n    yield encoder.encode(value)\n  }\n}\n\nasync function * encodeIterAsync (objectIterator, options) {\n  const encoder = new Encoder(options)\n  for await (const value of objectIterator) {\n    yield encoder.encode(value)\n  }\n}\n\n/**\n * Given an Iterable/Iterator input which yields buffers, returns an IterableIterator which yields sync decoded objects\n * Or, given an Async Iterable/Iterator which yields promises resolving in buffers, returns an AsyncIterableIterator.\n * @param {Iterable|Iterator|AsyncIterable|AsyncIterableIterator} bufferIterator\n * @param {object} [options] - Decoder options\n * @returns {IterableIterator|Promise.<AsyncIterableIterator}\n */\nexport function decodeIter (bufferIterator, options = {}) {\n  if (!bufferIterator || typeof bufferIterator !== 'object') {\n    throw new Error('first argument must be an Iterable, Async Iterable, Iterator, Async Iterator, or a promise')\n  }\n\n  const decoder = new Decoder(options)\n  let incomplete\n  const parser = (chunk) => {\n    let yields\n    // if there's incomplete data from previous chunk, concatinate and try again\n    if (incomplete) {\n      chunk = Buffer.concat([incomplete, chunk])\n      incomplete = undefined\n    }\n\n    try {\n      yields = decoder.decodeMultiple(chunk)\n    } catch (err) {\n      if (err.incomplete) {\n        incomplete = chunk.slice(err.lastPosition)\n        yields = err.values\n      } else {\n        throw err\n      }\n    }\n    return yields\n  }\n\n  if (typeof bufferIterator[Symbol.iterator] === 'function') {\n    return (function * iter () {\n      for (const value of bufferIterator) {\n        yield * parser(value)\n      }\n    })()\n  } else if (typeof bufferIterator[Symbol.asyncIterator] === 'function') {\n    return (async function * iter () {\n      for await (const value of bufferIterator) {\n        yield * parser(value)\n      }\n    })()\n  }\n}\n", "// @ts-ignore - bmp-js doesn't have type definitions\nconst bmpjs = require('bmp-js');\n\nexport interface BMPData {\n  width: number;\n  height: number;\n  bitPP: number;\n  compress: number;\n  fileSize: number;\n  offset: number;\n  rawSize: number;\n  is_with_alpha: boolean;\n  bottom_up: boolean;\n}\n\n/**\n * Immutable value object representing a BMP file validated against UBB protocol rules\n */\nexport class UBBBMP {\n  private readonly _buffer: Buffer;\n  private _bmpData: BMPData | null = null;\n  private _errors: readonly string[] | null = null;\n  private _warnings: readonly string[] | null = null;\n  private _isValid: boolean | null = null;\n\n  constructor(buffer: Buffer) {\n    this._buffer = buffer;\n  }\n\n  /**\n   * Whether the BMP is valid according to UBB protocol rules\n   */\n  get isValid(): boolean {\n    this._ensureValidated();\n    return this._isValid!;\n  }\n\n  /**\n   * Array of validation errors\n   */\n  get validationErrors(): readonly string[] {\n    this._ensureValidated();\n    return this._errors!;\n  }\n\n  /**\n   * Array of validation warnings\n   */\n  get validationWarnings(): readonly string[] {\n    this._ensureValidated();\n    return this._warnings!;\n  }\n\n  /**\n   * BMP width in pixels\n   */\n  get width(): number {\n    this._ensureValidated();\n    return this._bmpData!.width;\n  }\n\n  /**\n   * BMP height in pixels\n   */\n  get height(): number {\n    this._ensureValidated();\n    return this._bmpData!.height;\n  }\n\n  /**\n   * Bits per pixel (24 or 32)\n   */\n  get bitsPerPixel(): number {\n    this._ensureValidated();\n    return this._bmpData!.bitPP;\n  }\n\n  /**\n   * Compression type (should be 0 for BI_RGB)\n   */\n  get compression(): number {\n    this._ensureValidated();\n    return this._bmpData!.compress;\n  }\n\n  /**\n   * Actual file size in bytes\n   */\n  get fileSize(): number {\n    this._ensureValidated();\n    return this._bmpData!.fileSize;\n  }\n\n  /**\n   * Expected file size based on dimensions\n   */\n  get expectedFileSize(): number {\n    this._ensureValidated();\n    return this.calculateExpectedFileSize(this._bmpData!);\n  }\n\n  /**\n   * Row stride in bytes (padded to 4-byte boundary)\n   */\n  get stride(): number {\n    this._ensureValidated();\n    return this.calculateStride(this._bmpData!.width, this._bmpData!.bitPP);\n  }\n\n  /**\n   * Plot area in pixels\n   */\n  get area(): number {\n    return this.width * this.height;\n  }\n\n  /**\n   * Absolute height for placement (handles BMP top-down vs bottom-up)\n   */\n  get absoluteHeight(): number {\n    return Math.abs(this.height);\n  }\n\n  /**\n   * Whether this is a 24-bit RGB BMP\n   */\n  get is24Bit(): boolean {\n    return this.bitsPerPixel === 24;\n  }\n\n  /**\n   * Whether this is a 32-bit RGBA BMP\n   */\n  get is32Bit(): boolean {\n    return this.bitsPerPixel === 32;\n  }\n\n  /**\n   * Whether compression is BI_RGB (uncompressed)\n   */\n  get isUncompressed(): boolean {\n    return this.compression === 0;\n  }\n\n  /**\n   * Whether file size matches expected size\n   */\n  get hasCorrectFileSize(): boolean {\n    return this.fileSize === this.expectedFileSize;\n  }\n\n  /**\n   * Get detailed validation report\n   */\n  getValidationReport(): {\n    isValid: boolean;\n    errors: readonly string[];\n    warnings: readonly string[];\n    bmpInfo: {\n      width: number;\n      height: number;\n      bitsPerPixel: number;\n      compression: number;\n      fileSize: number;\n      expectedFileSize: number;\n      stride: number;\n    };\n  } {\n    this._ensureValidated();\n    return {\n      isValid: this._isValid!,\n      errors: this._errors!,\n      warnings: this._warnings!,\n      bmpInfo: {\n        width: this.width,\n        height: this.height,\n        bitsPerPixel: this.bitsPerPixel,\n        compression: this.compression,\n        fileSize: this.fileSize,\n        expectedFileSize: this.expectedFileSize,\n        stride: this.stride,\n      }\n    };\n  }\n\n  /**\n   * Ensures validation has been performed (lazy initialization)\n   */\n  private _ensureValidated(): void {\n    if (this._isValid !== null) {\n      return; // Already validated\n    }\n\n    const validation = this._validateBMP();\n    this._bmpData = validation.bmpData;\n    this._errors = validation.errors;\n    this._warnings = validation.warnings;\n    this._isValid = validation.isValid;\n  }\n\n  private _validateBMP(): {\n    bmpData: BMPData;\n    errors: readonly string[];\n    warnings: readonly string[];\n    isValid: boolean;\n  } {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    let isValid = true;\n    let bmpData: BMPData;\n\n    try {\n      // Parse BMP file using bmp-js\n      const bmpResult = bmpjs.decode(this._buffer);\n      \n      // Store the parsed BMP data\n      bmpData = {\n        width: bmpResult.width,\n        height: bmpResult.height,\n        bitPP: bmpResult.bitPP,\n        compress: bmpResult.compress,\n        fileSize: bmpResult.fileSize,\n        offset: bmpResult.offset,\n        rawSize: bmpResult.rawSize,\n        is_with_alpha: bmpResult.is_with_alpha,\n        bottom_up: bmpResult.bottom_up,\n      };\n\n      // Validate BMP format requirements\n      this._validateBMPFormat(bmpData, errors, warnings);\n      \n      // Check file size validation\n      this._validateFileSize(bmpData, errors, warnings);\n\n      isValid = errors.length === 0;\n\n    } catch (error) {\n      isValid = false;\n      errors.push(`Failed to parse BMP file: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      // Provide default BMP data for error cases\n      bmpData = {\n        width: 0,\n        height: 0,\n        bitPP: 0,\n        compress: -1,\n        fileSize: 0,\n        offset: 0,\n        rawSize: 0,\n        is_with_alpha: false,\n        bottom_up: false,\n      };\n    }\n\n    return {\n      bmpData,\n      errors: Object.freeze([...errors]),\n      warnings: Object.freeze([...warnings]),\n      isValid\n    };\n  }\n\n  private calculateStride(width: number, bitsPerPixel: number): number {\n    const bytesPerPixel = bitsPerPixel / 8;\n    return Math.ceil((width * bytesPerPixel) / 4) * 4;\n  }\n\n  private calculateExpectedFileSize(bmpData: BMPData): number {\n    const stride = this.calculateStride(bmpData.width, bmpData.bitPP);\n    return bmpData.offset + (stride * Math.abs(bmpData.height));\n  }\n\n  private _validateBMPFormat(bmpData: BMPData, errors: string[], warnings: string[]): void {\n    // Check bits per pixel (must be 24 or 32)\n    if (bmpData.bitPP !== 24 && bmpData.bitPP !== 32) {\n      errors.push(`Invalid bits per pixel: ${bmpData.bitPP}. Must be 24 or 32.`);\n    }\n\n    // Check compression (must be BI_RGB = 0)\n    if (bmpData.compress !== 0) {\n      errors.push(`Invalid compression: ${bmpData.compress}. Must be BI_RGB (0) - uncompressed only.`);\n    }\n\n    // Check for zero-sized plots\n    if (bmpData.width === 0 || bmpData.height === 0) {\n      errors.push(`Zero-sized plots are forbidden. Width: ${bmpData.width}, Height: ${bmpData.height}`);\n    }\n\n    // Check if dimensions are reasonable (not negative)\n    if (bmpData.width < 0 || bmpData.height < 0) {\n      errors.push(`Negative dimensions not allowed. Width: ${bmpData.width}, Height: ${bmpData.height}`);\n    }\n  }\n\n  private _validateFileSize(bmpData: BMPData, errors: string[], warnings: string[]): void {\n    const expectedSize = this.calculateExpectedFileSize(bmpData);\n    const actualBufferSize = this._buffer.length;\n    \n    // Check if header's claimed fileSize matches expected size based on dimensions\n    if (bmpData.fileSize !== expectedSize) {\n      errors.push(\n        `File size mismatch. Expected: ${expectedSize} bytes, Actual: ${bmpData.fileSize} bytes. ` +\n        `This indicates the BMP file may be corrupted or not properly formatted.`\n      );\n    }\n    \n    // Check if actual buffer length matches the header's claimed fileSize\n    // This catches truncated files where the header claims more data than is present\n    if (actualBufferSize !== bmpData.fileSize) {\n      errors.push(\n        `Buffer size mismatch. Header claims: ${bmpData.fileSize} bytes, Buffer contains: ${actualBufferSize} bytes. ` +\n        `This indicates the BMP file has been truncated or padded.`\n      );\n    }\n  }\n}\n", "import { UBBBMP } from './ubb-bmp';\n\n/**\n * Immutable value object representing a plot placement on the UBB canvas\n */\nexport class UBBPlot {\n  private readonly CANVAS_SIZE = 65536; // Canvas is 65536x65536 (coordinates 0-65535)\n  \n  private readonly _bmp: UBBBMP;\n  private readonly _x0: number;\n  private readonly _y0: number;\n  private readonly _errors: readonly string[];\n  private readonly _isValid: boolean;\n\n  constructor(bmp: UBBBMP, x0: number, y0: number) {\n    this._bmp = bmp;\n    this._x0 = x0;\n    this._y0 = y0;\n    \n    const validation = this._validatePlacement();\n    this._errors = validation.errors;\n    this._isValid = validation.isValid;\n  }\n\n  /**\n   * The BMP file for this plot\n   */\n  get bmp(): UBBBMP {\n    return this._bmp;\n  }\n\n  /**\n   * Plot X coordinate (top-left corner)\n   */\n  get x0(): number {\n    return this._x0;\n  }\n\n  /**\n   * Plot Y coordinate (top-left corner)\n   */\n  get y0(): number {\n    return this._y0;\n  }\n\n  /**\n   * Whether the plot placement is valid\n   */\n  get isValid(): boolean {\n    return this._isValid && this._bmp.isValid;\n  }\n\n  /**\n   * Array of placement validation errors\n   */\n  get validationErrors(): readonly string[] {\n    return this._errors;\n  }\n\n  /**\n   * All validation errors (BMP + placement)\n   */\n  get allValidationErrors(): readonly string[] {\n    return [...this._bmp.validationErrors, ...this._errors];\n  }\n\n  /**\n   * Whether the plot fits within the UBB canvas\n   */\n  get withinCanvas(): boolean {\n    return this.isWithinCanvas(this._x0, this._y0, this._bmp.width, this._bmp.height);\n  }\n\n  /**\n   * Plot area in pixels\n   */\n  get area(): number {\n    return this._bmp.area;\n  }\n\n  /**\n   * Create a new plot at different coordinates\n   */\n  atPosition(x0: number, y0: number): UBBPlot {\n    return new UBBPlot(this._bmp, x0, y0);\n  }\n\n  private _validatePlacement(): {\n    errors: readonly string[];\n    isValid: boolean;\n  } {\n    const errors: string[] = [];\n\n    // Check if plot is within canvas bounds\n    if (!this.isWithinCanvas(this._x0, this._y0, this._bmp.width, this._bmp.height)) {\n      errors.push(\n        `Plot extends outside canvas bounds. ` +\n        `Position: (${this._x0}, ${this._y0}), Size: ${this._bmp.width}x${this._bmp.height}, ` +\n        `Canvas: ${this.CANVAS_SIZE}x${this.CANVAS_SIZE}`\n      );\n    }\n\n    // Check for valid coordinates\n    if (this._x0 < 0 || this._y0 < 0) {\n      errors.push(`Plot coordinates must be non-negative. Position: (${this._x0}, ${this._y0})`);\n    }\n\n    // Check if plot would be too large for the canvas\n    if (this._x0 + this._bmp.width > this.CANVAS_SIZE || this._y0 + this._bmp.height > this.CANVAS_SIZE) {\n      errors.push(\n        `Plot extends beyond canvas boundaries. ` +\n        `Right edge: ${this._x0 + this._bmp.width}, Bottom edge: ${this._y0 + this._bmp.height}, ` +\n        `Canvas limit: ${this.CANVAS_SIZE}`\n      );\n    }\n\n    return {\n      errors: Object.freeze([...errors]),\n      isValid: errors.length === 0\n    };\n  }\n\n  private isWithinCanvas(x0: number, y0: number, width: number, height: number): boolean {\n    return x0 >= 0 && \n           y0 >= 0 && \n           x0 + width <= this.CANVAS_SIZE && \n           y0 + height <= this.CANVAS_SIZE &&\n           width > 0 && \n           height > 0;\n  }\n}\n"],
  "mappings": "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",
  "names": ["len", "i", "len2", "Buffer", "target", "read", "i", "byteLength", "src", "setPixelData", "rgb", "decoder", "encode", "decode", "i", "structure", "read", "target", "Buffer", "position", "bundledStrings", "referenceMap", "packedObjectMap", "sharedPackedObjectMap", "sharedValues", "packedValues", "encode", "options", "maxBytes", "isLittleEndianMachine", "Buffer"]
}
